<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>encukou/blog</title><link href="https://encukou.cz/" rel="alternate"></link><link href="https://encukou.cz/feeds/all.atom.xml" rel="self"></link><id>https://encukou.cz/</id><updated>2021-02-19T00:00:00+01:00</updated><subtitle>primary colors underneath</subtitle><entry><title>Týdenní poznámky #7</title><link href="https://encukou.cz/blog/2021/02/19/cs-tydenni-07" rel="alternate"></link><published>2021-02-19T00:00:00+01:00</published><updated>2021-02-19T00:00:00+01:00</updated><author><name>Petr Viktorin</name></author><id>tag:encukou.cz,2021-02-19:/blog/2021/02/19/cs-tydenni-07</id><summary type="html">
&lt;p&gt;Utekl další týden (16. 2. – 19. 2.), a tak si sepisuju, co jsem dělal.&lt;/p&gt;
</summary><content type="html">

&lt;p&gt;Utekl další týden (16. 2. – 19. 2.), a&amp;nbsp;tak si sepisuju, co jsem&amp;nbsp;dělal.&lt;/p&gt;


&lt;h2 id="pondeli-kurz"&gt;Pondělí: Kurz!&lt;/h2&gt;
&lt;p&gt;V pondělí jsem zpracovával registrace ne kurz, vítal účastníky, odpovídal
na otázky.
I&amp;nbsp;na přípravu a&amp;nbsp;točení videí na instalační lekci zbyla trocha času,
i&amp;nbsp;když ne tolik, kolik bych&amp;nbsp;chtěl.&lt;/p&gt;
&lt;p&gt;Většina týmů se přihlásila v pondělí a&amp;nbsp;úterý, ale spočítal jsem je až později,
když jsem uzavíral přihlášky.
Celkem je týmů 56&amp;nbsp;a&amp;nbsp;mají od dvou do pěti lidí.
I&amp;nbsp;kdyby to bylo jen 56&amp;nbsp;lidí, byl by to největší kurz co jsem zatím učil,
a&amp;nbsp;tak doufám, že náročnost neroste&amp;nbsp;lineárně.&lt;/p&gt;
&lt;p&gt;Docela dost týmů má někoho, kdo není úplný začátečník; snad i&amp;nbsp;tohle ze začátku
trochu uleví koučům.&lt;/p&gt;
&lt;p&gt;Večer byl další sraz projektu Freezeyt.
Tentokrát se k nám přidal nový člen (který v klubu junior.guru hledal projekt,
tak jsem ho tak trochu naverboval).
A&amp;nbsp;tak jsem prošel celý kód, vysvětloval co to dělá a&amp;nbsp;odpovídal na otázky.
Všem je to teď jasnější – ne jen&amp;nbsp;nováčkovi.&lt;/p&gt;
&lt;p&gt;Další Freezeyt srazy jsme přesunuli na úterý, protože v pondělí bude
začátečnický kurz.&lt;/p&gt;
&lt;h2 id="utery-cpython"&gt;Úterý: CPython&lt;/h2&gt;
&lt;p&gt;Úterky mám vyhrazené na vylepšování stabilního ABI.
A&amp;nbsp;tak jsem dělal přesně tohle.
Jediné co je z toho vidět je &lt;a href="https://github.com/python/cpython/pull/24551"&gt;pull request na zveřejnění funkce &lt;code&gt;PyCFunction_New&lt;/code&gt;&lt;/a&gt;,
která byla k dispozici na Windows ale ne na&amp;nbsp;Linuxu.&lt;/p&gt;
&lt;p&gt;To je docela rarita.
Většinou to bývá naopak, protože Windows má &lt;a href="https://github.com/python/cpython/blob/d5fc99873769f0d0d5c5d5d99059177a75a4e46e/PC/python3dll.c"&gt;seznam exportovaných fukcí&lt;/a&gt;,
ktežto Linuxu se exportuje každá funkce nadefinovaná jako API.
Jenže zrovna &lt;code&gt;PyCFunction_New&lt;/code&gt; byla nadefinována jako makro, což znamená,
že v C fungovala normálně ale z jiných jazyků by použít&amp;nbsp;nešla.&lt;/p&gt;
&lt;h2 id="streda"&gt;Středa&lt;/h2&gt;
&lt;p&gt;Nějakou dobu už se nám na nejnovější Fedoře nedaří zkompilovat
Python 3.4, 3.5&amp;nbsp;a&amp;nbsp;3.6, tak jsem se na to ve podíval.
Jde o&amp;nbsp;dvě nezávislé chyby.
Na jednu jsem přišel docela rychle, ale pak jsem většinu dne
strávil tím, že jsem se snažil tu druhou zreplikovat na svém počítači.
Bylo do dost frustrující.&lt;/p&gt;
&lt;h2 id="ctvrtek"&gt;Čtvrtek&lt;/h2&gt;
&lt;p&gt;Ve čtvrtek jsem chybu v&amp;nbsp;Pythonu 3.5&amp;nbsp;konečně dostal u&amp;nbsp;sebe,
po pár pokusech jsem místo „testy spadnou“ věděl, který z testů padá,
pak která funkce a&amp;nbsp;pak i&amp;nbsp;který řádek Pythoního kódu.
To ale nestačilo: pokračoval jsem řádkem C kódu a&amp;nbsp;nakonec i&amp;nbsp;konkrétní
instrukcí procesoru.
K tomu jsem si musel dohledat, co vlastně dělají instrukce jako &lt;code&gt;punpcklqdq&lt;/code&gt; a
&lt;code&gt;movaps&lt;/code&gt; – a&amp;nbsp;najednou to začlo být jasné.
Instrukce &lt;code&gt;movaps&lt;/code&gt; totiž pracuje s daty, které jsou v paměti zarovnané:
začínají na sudém bajtu.
Za to je (předpokládám) trochu rychlejší než alternativy.
No a&amp;nbsp;novější překladač C se snaží vytvořit co nejrychlejší kód, a&amp;nbsp;tak tam, kde
umí dokázat že příslušná data musí být zarovnaná, použije tuhle instrukci.
No a&amp;nbsp;protože zdrojáky Pythonu 3.6, zdá se, neodpovídají úplně přesně detailům
standardu C, chyba je na světě.&lt;/p&gt;
&lt;p&gt;Večer jsem &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1923658#c13"&gt;chybu a&amp;nbsp;svou analýzu&lt;/a&gt; ukázal Victorovi, který si
vzpomněl že v Pythonu 3.7&amp;nbsp;se něco podobného řešilo a&amp;nbsp;nasměroval mě na&amp;nbsp;opravu.
Hurá!&lt;/p&gt;
&lt;p&gt;Jo, a&amp;nbsp;taky ve čtvrtek začal &lt;a href="https://www.devconf.info/cz/"&gt;DevConf&lt;/a&gt;, tak jsem koukal na pár&amp;nbsp;přednášek.&lt;/p&gt;
&lt;h2 id="patek-devconf"&gt;Pátek: DevConf&lt;/h2&gt;
&lt;p&gt;DevConf pokračoval i&amp;nbsp;v pátek.
Sledoval jsem další přednášky, ale ty online konference prostě nejsou ono.
Zpětně mi to přijde spíš jako promrhaný čas :(&lt;/p&gt;</content><category term="misc"></category><category term="weekly"></category></entry><entry><title>Týdenní poznámky #6</title><link href="https://encukou.cz/blog/2021/02/12/cs-tydenni-06" rel="alternate"></link><published>2021-02-12T00:00:00+01:00</published><updated>2021-02-12T00:00:00+01:00</updated><author><name>Petr Viktorin</name></author><id>tag:encukou.cz,2021-02-12:/blog/2021/02/12/cs-tydenni-06</id><summary type="html">
&lt;p&gt;Utekl další týden (9. 2. – 12. 2.), a tak si sepisuju, co jsem dělal.&lt;/p&gt;
</summary><content type="html">

&lt;p&gt;Utekl další týden (9. 2. – 12. 2.), a&amp;nbsp;tak si sepisuju, co jsem&amp;nbsp;dělal.&lt;/p&gt;


&lt;h2 id="pondeli-nahravani"&gt;Pondělí: Nahrávání&lt;/h2&gt;
&lt;p&gt;V pondělí jsem postavil domácí studio a&amp;nbsp;nahrával úvodní video
nového začátečnického kurzu.
Nepodařilo se to úplně, tak jsem ve zbytku týdne dodělával
a&amp;nbsp;nakonec ho i&amp;nbsp;nahrál &lt;a href="https://www.youtube.com/watch?v=so10Ud-YlKE"&gt;na&amp;nbsp;YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="utery-cpython"&gt;Úterý: CPython&lt;/h2&gt;
&lt;p&gt;Dokument, o&amp;nbsp;tom, co chci v Pythonu změnit kolem stabilního Pythonu, má číslo:
je to &lt;a href="https://www.python.org/dev/peps/pep-0652/"&gt;PEP 652&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Pořád je to návrh. Až budu dostatečně jistý, že je rozumný a&amp;nbsp;proveditelný
(což zjistím tak, že si ty změny udělám u&amp;nbsp;sebe), pošlu ho pythonovému
&lt;a href="https://www.python.org/dev/peps/pep-8016/"&gt;řídícímu výboru&lt;/a&gt; na&amp;nbsp;oštemplování.&lt;/p&gt;
&lt;h2 id="streda-fedora"&gt;Středa: Fedora&lt;/h2&gt;
&lt;p&gt;Jak to už ve středy bývá, dělal jsem spoustu malých komunikací a&amp;nbsp;review.
Třeba na Mirův &lt;a href="https://src.fedoraproject.org/rpms/pyproject-rpm-macros/pull-request/146"&gt;pull request na opravu makra &lt;code&gt;%pyproject_save_files&lt;/code&gt;&lt;/a&gt;,
které vytahuje seznam souborů z Pythnonních &lt;em&gt;wheel&lt;/em&gt;&amp;nbsp;archivů.&lt;/p&gt;
&lt;p&gt;RPM třeba potřebuje kromě jednotlivých souborů vědět i&amp;nbsp;o&amp;nbsp;adresářích,
ve kterých soubory jsou, ale &lt;em&gt;wheel&lt;/em&gt; adresáře většinou neuvádí.
A&amp;nbsp;stejně tak neuvádí automaticky generované soubory &lt;code&gt;.pyc&lt;/code&gt;.
Doplňování těchto informací tak není úplkně&amp;nbsp;jednoduché.&lt;/p&gt;
&lt;h2 id="ctvrtek-porada"&gt;Čtvrtek: Porada&lt;/h2&gt;
&lt;p&gt;Měli jsme dlouhou diskusi o&amp;nbsp;detailech nových &lt;a href="https://hackmd.io/XzJe-sHUQvWK7cSrEH_aKg"&gt;balíčkovacích pravidela&lt;/a&gt;
pro Python ve Fedoře. Snad se tuhle verzi podaří&amp;nbsp;schválit...&lt;/p&gt;
&lt;p&gt;Největší změna v nových pravidlech je synchronizace s jmény projektů na PyPI:
když se něco ve Fedoře jmenuje Requests (technicky, &lt;code&gt;python3dist(requests)&lt;/code&gt;),
tak to musí odpovídat balíčku &lt;a href="https://pypi.org/project/requests/"&gt;requests&lt;/a&gt; na PyPI.
To se teď neděje a&amp;nbsp;tak je těžké korektně automatizovat balíčkování&amp;nbsp;závislostí.&lt;/p&gt;
&lt;h2 id="patek"&gt;Pátek&lt;/h2&gt;
&lt;p&gt;No a&amp;nbsp;pátek jsem zabil prací co zatím není úplně&amp;nbsp;veřejná.&lt;/p&gt;</content><category term="misc"></category><category term="weekly"></category></entry><entry><title>Týdenní poznámky #5</title><link href="https://encukou.cz/blog/2021/02/05/cs-tydenni-05" rel="alternate"></link><published>2021-02-05T00:00:00+01:00</published><updated>2021-02-05T00:00:00+01:00</updated><author><name>Petr Viktorin</name></author><id>tag:encukou.cz,2021-02-05:/blog/2021/02/05/cs-tydenni-05</id><summary type="html">
&lt;p&gt;Utekl další týden (2. 2. – 5. 2.), a tak si sepisuju, co jsem dělal.&lt;/p&gt;
</summary><content type="html">

&lt;p&gt;Utekl další týden (2. 2. – 5. 2.), a&amp;nbsp;tak si sepisuju, co jsem&amp;nbsp;dělal.&lt;/p&gt;


&lt;h2 id="pondeli-kurz-bude"&gt;Pondělí: Kurz bude&lt;/h2&gt;
&lt;p&gt;Dál jsem připravoval podklady k úvodní lekci.
Tentokrát to byl hlavně úvod do příkazové řádky.
Kolem začátků kurzů bývá docela shon, tak jsem se k téhle části moc nedostal,
i&amp;nbsp;když potřebuje zjednodušit.
A&amp;nbsp;doplnit o&amp;nbsp;kopírování textu z (a&amp;nbsp;do)&amp;nbsp;terminálu.&lt;/p&gt;
&lt;p&gt;Příště už začnu budu točit, fakt!&lt;/p&gt;
&lt;h2 id="utery-stabilni-abi"&gt;Úterý: Stabilní ABI&lt;/h2&gt;
&lt;p&gt;Celý den jsem implementoval nový PEP ohledně stabilního ABI
a&amp;nbsp;podle toho na co jsem si přitom vzpoměl jsem dolaďpoval text.
A&amp;nbsp;bylo to super!
Už se mi moc nestává že bych strávil celý den programováním a&amp;nbsp;docela mi
to chybí.
V devět večer, kdy už normálně, jsem se podíval na hodiny – a&amp;nbsp;ono bylo devět
večer! &lt;a href="https://en.wikipedia.org/wiki/Flow_(psychology)"&gt;Flow&lt;/a&gt; je skvělá&amp;nbsp;věc.&lt;/p&gt;
&lt;p&gt;Ten jsem pak zveřejnil na
&lt;a href="https://discuss.python.org/t/pre-pep-maintaining-the-stable-abi/6986"&gt;discuss.python.org&lt;/a&gt;,
což je jedna z byrokratických podmínek pro to, aby o&amp;nbsp;tom pak hlasoval&amp;nbsp;výbor.&lt;/p&gt;
&lt;p&gt;Pár lidí (včetně Guida, kterého jsem v téhle oblasti nečekal) se ozvalo
s připomínkama, ale na žádné zásadní změny to&amp;nbsp;nevypadá.&lt;/p&gt;
&lt;h2 id="streda-balickovani"&gt;Středa: Balíčkování&lt;/h2&gt;
&lt;p&gt;Poslední verze Setuptools už neobsahuje nástroj
&lt;a href="http://peak.telecommunity.com/DevCenter/EasyInstall"&gt;easy-install&lt;/a&gt;.
A&amp;nbsp;kromě toho je teď k instalaci Setuptools potřeba Setuptools
(většinou ve starší verzi).
Ta se dá nainstalovat Pipem, ale k sestavení Pipu je potřeba Setuptools.
Ve Fedoře jsou s tím docela problémy (a&amp;nbsp;v jiných distribucích taky – nejhůř
na tom jsou asi distra jako Arch), ale s autorem Setuptools se naštěstí dá
mluvit, tak se situace snad zlepší. I&amp;nbsp;kdyby ne, uživatel to nepocítí.
No, a&amp;nbsp;co jsem k&amp;nbsp;tomu udělal já ve středu? Pár review; oddřel to hlavně&amp;nbsp;Miro.&lt;/p&gt;
&lt;p&gt;Odpoledne jsem dělal na podpoře pro &lt;a href="https://en.wikipedia.org/wiki/Federal_Information_Processing_Standards"&gt;standardy, které vyžaduje americká vláda&lt;/a&gt;,
a&amp;nbsp;tak je přidáváme do Pythonu.
Reálný přínos je sporný, ale zaplatí to spoustu z toho ostatního co děláme :)&lt;/p&gt;
&lt;h2 id="ctvrtek-mitink-brifink-brainstormink"&gt;Čtvrtek: Mítink brífink brainstormink&lt;/h2&gt;
&lt;p&gt;Nějaké reviews, týmový meeting, a&amp;nbsp;spousta malých&amp;nbsp;úkolů.&lt;/p&gt;
&lt;p&gt;Šéf si mě pozval na kobereček, tak jsme pokecali, stanovili formální cíle
a&amp;nbsp;zadali je do nástroje pro správu formálních cílů.
A&amp;nbsp;přijde mi že čím jsem starší, tím víc mi tyhle věci dávají smysl.
Znamená to že jsem dospělejší, nebo&amp;nbsp;zkostnatělejší?&lt;/p&gt;
&lt;h2 id="patek-podman"&gt;Pátek: Podman&lt;/h2&gt;
&lt;p&gt;V pátek byl v Red Hatu „Learning Day“ – zrušily se téměř všechny porady a
schůze v celé firmě a&amp;nbsp;každý měl za úkol se něco nového&amp;nbsp;(na)učit.&lt;/p&gt;
&lt;p&gt;S Lumírem jsme nasadili tymový &lt;a href="https://etherpad.org/"&gt;Etherpad&lt;/a&gt;, abychom
si mohli dělat poznámky.
Dokumenty v Google Docs, Jiře a&amp;nbsp;podobných nám totiž moc nevyhovují:
barevné zvýraznění podle autora je na poznámky naprosto skvělá&amp;nbsp;věc.&lt;/p&gt;
&lt;p&gt;A&amp;nbsp;tak vím zase něco víc o&amp;nbsp;kontejnerech a &lt;code&gt;systemd&lt;/code&gt; :)&lt;/p&gt;
&lt;p&gt;Ansible jsme nakonec nepoužili, ale i&amp;nbsp;ten jsem vyzkoušel  – a&amp;nbsp;dokonce v něm
našel &lt;a href="https://github.com/ansible/ansible/issues/73503"&gt;chybu&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="ctenarsky-denik"&gt;Čtenářský deník&lt;/h2&gt;
&lt;p&gt;Dočetl jsem &lt;em&gt;I, Robot&lt;/em&gt; or I, Asimova.
Naprostá klasika, která inspirovala spoustu pozdějších příběhů s robotama
(i&amp;nbsp;když akční nesmysl stejného jména je o&amp;nbsp;něčem úplně&amp;nbsp;jiném).&lt;/p&gt;
&lt;p&gt;Jedna z&amp;nbsp;povídek se odehrává na světlé straně Merkuru, což mi ještě víc než
všudypřítomné kouření připomnělo jak je ta knížka stará.
Na to, že se tam střídá den a&amp;nbsp;noc, se přišlo ještě než jsem se&amp;nbsp;narodil!&lt;/p&gt;</content><category term="misc"></category><category term="weekly"></category></entry><entry><title>Týdenní poznámky #4</title><link href="https://encukou.cz/blog/2021/01/29/cs-tydenni-04" rel="alternate"></link><published>2021-01-29T00:00:00+01:00</published><updated>2021-01-29T00:00:00+01:00</updated><author><name>Petr Viktorin</name></author><id>tag:encukou.cz,2021-01-29:/blog/2021/01/29/cs-tydenni-04</id><summary type="html">
&lt;p&gt;Utekl další týden (26. 1. – 29. 1.). Vlastě už utekl celý měsíc!&lt;/p&gt;
</summary><content type="html">

&lt;p&gt;Utekl další týden (26. 1. – 29. 1.). Vlastě už utekl celý&amp;nbsp;měsíc!&lt;/p&gt;


&lt;h2 id="pondeli-scenar"&gt;Pondělí: Scénář&lt;/h2&gt;
&lt;p&gt;To hlavní, co jsem stihl v pondělí, je scénář pro první lekci nového kurzu.
Pořád jsem si ještě nezvykl, jak dlouho tyhle věci trvají, ať už jde o&amp;nbsp;kurz
nebo přednášku.
Když chci půl hodiny mluvit, chce to minimálně 4&amp;nbsp;hodiny přípravy.
Když chci mluvit dvě hodiny týdně, tak to s&amp;nbsp;nahráváním post-processingem
vypadá na práci plný úvazek. Ještě že většina kurzu už je&amp;nbsp;napsaná.&lt;/p&gt;
&lt;p&gt;Večer jsem se tradičně připojil na Freezeyt stream.
Tentokrát jsem většinu času strávil implementací (a&amp;nbsp;kontrolou) detailů
protokolu WSGI.
Nástroj tak snad bude použitelný na opravdu všechny stránky napsané v Pythonu.
Teda kromě těch co používají novější&amp;nbsp;ASGI.&lt;/p&gt;
&lt;p&gt;Zbytek týdne jsem po večerech stavěl teleprompter z kousků dřeva a&amp;nbsp;polystyrenu
(průhledného, ne pěnového), 
Snažím se zůstávat doma, ne běhat do železářství pro šroubky.
Design tím docela trpí, ale to nevadí – stejně tenhle výtvor nikdo&amp;nbsp;neuvidí.&lt;/p&gt;
&lt;h2 id="utery-setuptools-py3c-apathlib"&gt;Úterý: Setuptools, py3c a&amp;nbsp;pathlib&lt;/h2&gt;
&lt;p&gt;V úterý jsem tentokrát jen koukal na pull requesty a&amp;nbsp;diskutoval.&lt;/p&gt;
&lt;p&gt;Modul &lt;code&gt;distutils&lt;/code&gt; ze standardní knihovny nefunguje moc dobře; skoro všichni
místo něj používají Setuptools.
Rozhodlo se tedy, že se &lt;code&gt;distutils&lt;/code&gt; z&amp;nbsp;Pythonu odebere a&amp;nbsp;začlení do Setuptools.
Ale je s tím problém: &lt;code&gt;distutils&lt;/code&gt; je jediné místo, kde se dá nastavit kam
se soubory kolem Pythonu instalují, a&amp;nbsp;tak má spousta linuxových distribucí
v &lt;code&gt;setuptools&lt;/code&gt; několik změn, které nastavují např. kdy instalovat do
instalovat do &lt;code&gt;/usr/&lt;/code&gt; a&amp;nbsp;kdy do &lt;code&gt;/usr/local/&lt;/code&gt;.
Ve standardní knihovně se takové změny dají dělat jednoduše, ale u&amp;nbsp;Setuptools
je to horší – tam si uživatel může doinstalovat novou verzi a&amp;nbsp;všechny změny
přepsat.
A&amp;nbsp;tak je potřeba udělat nové místo na nastavením a&amp;nbsp;zajistit aby ho všechny
distribuce i&amp;nbsp;Setuptools začaly používat.
Do &lt;a href="https://github.com/pypa/distutils/pull/23"&gt;pull requestu do Setuptools&lt;/a&gt;,
který se o&amp;nbsp;tohle snaží, jsem napsal pár&amp;nbsp;postřehů.&lt;/p&gt;
&lt;p&gt;Někdo poslal &lt;a href="https://github.com/encukou/py3c/pull/42"&gt;pull request do py3c&lt;/a&gt;,
knihovny pro zpětnou kompatibilitu rozšiřujících modulů pro Python 2/3.
(Něco jako &lt;code&gt;six&lt;/code&gt; pro moduly napsané v C.)
Nápad byl dobrý, ale &lt;a href="https://github.com/encukou/py3c/pull/41"&gt;celý PR jsem nakonec&amp;nbsp;přepsal&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Přidal jsem i &lt;a href="https://discuss.python.org/t/make-pathlib-extensible/3428/28?u=encukou"&gt;komentář&lt;/a&gt;
do tématu o&amp;nbsp;tom, že by se modul &lt;code&gt;pathlib&lt;/code&gt; dal
používat pro jiné „cesty“ než ty v tradičním souborovém systému.
To je něco, co bych mohl využít ve
&lt;a href="https://github.com/encukou/gitpathlib"&gt;svojí knihovně na cesty v&amp;nbsp;Gitovém ropozitáři&lt;/a&gt;.
Trochu mě mrzí, že tomuhle projektu nemůžu věnovat víc&amp;nbsp;času.&lt;/p&gt;
&lt;h2 id="streda-bcond"&gt;Středa: bcond&lt;/h2&gt;
&lt;p&gt;Ve středu jsem se potýkal s makrama v RPM, balíčkovacím systému co používáme
ve Fedoře.
Napsal jsem &lt;a href="https://github.com/rpm-software-management/rpm/pull/1520"&gt;makro &lt;code&gt;%bcond&lt;/code&gt;&lt;/a&gt;,
které by mělo zjednodušit parametrizaci balíčků: v Pythonu to např. používáme
pro variantu „bez testů“ nebo „bez optimizací“, které se rychleji vytvoří
(ale nefungují pak tak dobře) a&amp;nbsp;tak je používáme na zkoušení nových&amp;nbsp;věcí.&lt;/p&gt;
&lt;h2 id="ctvrtek-fedora"&gt;Čtvrtek: Fedora&lt;/h2&gt;
&lt;p&gt;Spousta malých věcí.
Nejdůležitější asi byla triviální aktualizace
&lt;a href="https://src.fedoraproject.org/rpms/python-plette/pull-request/1"&gt;plette&lt;/a&gt; –
snad poslední věc co blokuje vydání nového Pipenv ve&amp;nbsp;Fedoře.&lt;/p&gt;
&lt;h2 id="patek-el"&gt;Pátek: EL&lt;/h2&gt;
&lt;p&gt;No a&amp;nbsp;v pátek jsem dělal hlavně na něčem, co budou veřejné až za pár měsíců ;)&lt;/p&gt;
&lt;h2 id="ctenarsky-denik"&gt;Čtenářský deník&lt;/h2&gt;
&lt;p&gt;Dočetl jsem &lt;em&gt;The Last Continent&lt;/em&gt; od T. Pratchetta, jednu z posledních
zeměplošských knížek co mi ještě zbývala.
Nebylo to tak skvělé jak si Zeměplochu pamatuju.
Možná jsem moc vyrostl, možná jenom zrovna v téhle knížce bylo příliš mnoho
stereotypně otravných čarodějů.&lt;/p&gt;</content><category term="misc"></category><category term="weekly"></category></entry><entry><title>Týdenní poznámky #3</title><link href="https://encukou.cz/blog/2021/01/22/cs-tydenni-03" rel="alternate"></link><published>2021-01-22T00:00:00+01:00</published><updated>2021-01-22T00:00:00+01:00</updated><author><name>Petr Viktorin</name></author><id>tag:encukou.cz,2021-01-22:/blog/2021/01/22/cs-tydenni-03</id><summary type="html">
&lt;p&gt;Utekl další týden (19. 1. – 22. 1.), a tak si sepisuju, co jsem dělal.&lt;/p&gt;
</summary><content type="html">

&lt;p&gt;Utekl další týden (19. 1. – 22. 1.), a&amp;nbsp;tak si sepisuju, co jsem&amp;nbsp;dělal.&lt;/p&gt;


&lt;h2 id="pondeli-priprava-tymoveho-kurzu"&gt;Pondělí: Příprava týmového kurzu&lt;/h2&gt;
&lt;p&gt;Připravuju začátečnický kurz, který neorganizují PyLadies.
Přes video, pro všechny.
Registrovaní budou mít určité výhody, ale hlavní z nich je lepší motivace.
Čekám, že s tou budou u&amp;nbsp;videokurzu&amp;nbsp;problémy.&lt;/p&gt;
&lt;p&gt;Rozhodl jsem se na tomhle kurzu vyzkoušet skupinové přihlašování,
něco, o&amp;nbsp;čem jsem slyšel někdy v začátcích kurzů pro PyLadies
&lt;a href="https://youtu.be/FtKO619O5g0?t=714"&gt;na přednášce Grega Wilsona&lt;/a&gt;,
ale co jsem nikdy neimplementoval.
Doufám že to trochu pomůže s tou&amp;nbsp;motivací.&lt;/p&gt;
&lt;p&gt;Minule jsem zjistil, že jeden z nástrojů co se na kurzy používá nemá
na mě dost dobře vyřešenou ochranu soukromí.
Tento týden jsem udělal něco pro nápravu; snad se to&amp;nbsp;povede.&lt;/p&gt;
&lt;h2 id="utery-cpython"&gt;Úterý: CPython&lt;/h2&gt;
&lt;p&gt;Mergnul jsem &lt;a href="https://github.com/python/cpython/pull/24119"&gt;konečně hotové PR&lt;/a&gt;
a&amp;nbsp;pak jsem celý den zkoumal, jak vypadá a&amp;nbsp;jak by mělo vypadat stabilní ABI
CPythonu.
Je to zhruba tisíc funkcí a&amp;nbsp;datových typů, a&amp;nbsp;já se snažím zjistit, které přesně
to jsou.&lt;/p&gt;
&lt;h2 id="adal"&gt;A&amp;nbsp;dál...?&lt;/h2&gt;
&lt;p&gt;Další dny jsem dělal spoustu malých věcí, z nichž spousta ještě není&amp;nbsp;veřejná.&lt;/p&gt;
&lt;p&gt;U&amp;nbsp;úkolů co si naplánuju předem je jednoduché je místo smazání přesunout
do osonovy tohohle článku na blog.
Nemám ale nacvičené zapisování „reaktivních“ činností: zapletení se do
konverzace, review kódu o&amp;nbsp;který mě někdo požádá, reakce na novou prioritní
chybu.
Druhá půlka tohohle týdne byla plná takových věcí, a&amp;nbsp;teď si připadám že jsem
se tři dny flákal, i&amp;nbsp;když jsem pracoval.
Takže úkol na příště: všechno si&amp;nbsp;zapisovat!&lt;/p&gt;
&lt;h2 id="ctenarsky-denik"&gt;Čtenářský deník&lt;/h2&gt;
&lt;p&gt;Dočetl jsem knížku &lt;a href="https://www.goodreads.com/book/show/39074550-humble-pi#"&gt;Humble Pi&lt;/a&gt; od Matta Parkera.
Je o&amp;nbsp;matematických chybách, kvůli kterým padaly mosty a&amp;nbsp;letadla – nebo jen
nevyšlo množství sladu na pivo.
Spousta too pro mě nebyla nová, ale přesto jsem se&amp;nbsp;bavil.&lt;/p&gt;</content><category term="misc"></category><category term="weekly"></category></entry><entry><title>Týdenní poznámky #2</title><link href="https://encukou.cz/blog/2021/01/15/cs-tydenni-02" rel="alternate"></link><published>2021-01-15T00:00:00+01:00</published><updated>2021-01-15T00:00:00+01:00</updated><author><name>Petr Viktorin</name></author><id>tag:encukou.cz,2021-01-15:/blog/2021/01/15/cs-tydenni-02</id><summary type="html">
&lt;p&gt;Utekl další týden (12. 1. – 15. 1.), a tak si sepisuju, co jsem dělal.&lt;/p&gt;
</summary><content type="html">

&lt;p&gt;Utekl další týden (12. 1. – 15. 1.), a&amp;nbsp;tak si sepisuju, co jsem&amp;nbsp;dělal.&lt;/p&gt;


&lt;h2 id="pondeli-naucse"&gt;Pondělí: naucse&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/pyvec/naucse/pull/44"&gt;Opravil jsem CSS&lt;/a&gt; pro lekce psané
v Jupyter Notebooku. Ještě to není úplně nasazené, příští týden&amp;nbsp;dokončím.&lt;/p&gt;
&lt;p&gt;Sepsal jsem si, co bude potřeba pro rozjezd videokurzu.
Zas tolik toho není; zatím to vypadá že největší překážka je asi drobnost
v &lt;a href="https://projekty.pyladies.cz/"&gt;odevzdávátku&lt;/a&gt;.
Tak se to snad povede a&amp;nbsp;zorganizuju kurz – po pár letech co učím kurzy které
organizují &lt;a href="https://pyladies.cz/brno/#past-meetups"&gt;PyLadies&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="utery-cpython"&gt;Úterý: CPython&lt;/h2&gt;
&lt;p&gt;Většinu úterka jsem strávil definování stabilního ABI – slučováním seznamů
z několika různých zdrojů.
Už se „těším“ na diskuse které nastanou až budu hotový se svým&amp;nbsp;návrhem.&lt;/p&gt;
&lt;p&gt;A&amp;nbsp;pár menších věcí:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Oprava &lt;a href="https://github.com/python/cpython/pull/22632"&gt;správy paměti při importech&lt;/a&gt;
  je konečně hotová&lt;/li&gt;
&lt;li&gt;Oprava správy paměti &lt;a href="https://bugs.python.org/issue40052"&gt;u &lt;em&gt;vectorcall&lt;/em&gt;&lt;/a&gt;
  taky, bude v&amp;nbsp;další revizi&amp;nbsp;3.8.&lt;/li&gt;
&lt;li&gt;Oprava &lt;a href="https://github.com/python/cpython/pull/24119"&gt;zavírání souborů&lt;/a&gt;
  v ttestech se trochu posunula,&amp;nbsp;CI.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Taky se strhla &lt;a href="https://mail.python.org/archives/list/python-dev@python.org/thread/C4ILXGPKBJQYUN5YDMTJOEOX7RHOD4S3/#CKABGMLSJLKDGKUOMXA6MKO36MEWZIIS"&gt;mailová diskuse&lt;/a&gt;
ohledně &lt;em&gt;heap types&lt;/em&gt;.
Co to je? Zjednodušeně řečeno: typy které se dají měnit, na rozdíl od
&lt;em&gt;statických typů&lt;/em&gt; jako např. &lt;code&gt;str&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;něco jiného&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="n"&gt;attributes&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;built&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;extension&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;str&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Třídy definované v Pythonu jsou &lt;em&gt;heap types&lt;/em&gt;.
Aktuálně se na ně převádí spousta „vestavěných“ typů.
V aktuální alfa verzi Pythonu 3.10&amp;nbsp;tak jde udělat třeba:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;array&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;něco jiného&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;něco jiného&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Diskuse se točila kolem toho, proč jsou &lt;em&gt;heap types&lt;/em&gt; lepší, pokud chceme
umožnit &lt;a href="https://www.python.org/dev/peps/pep-0554/"&gt;pod-interprety&lt;/a&gt;
bez GIL (sdíleného zámku).&lt;/p&gt;
&lt;p&gt;Než se bude dát měnit &lt;code&gt;str&lt;/code&gt;, nějakou dobu to potrvá a&amp;nbsp;nejspíš bude potřeba
změnit C-API Pythonu. Ale zatím to vypadá že nakonec to tak&amp;nbsp;bude.&lt;/p&gt;
&lt;h2 id="streda-fedora"&gt;Středa: Fedora&lt;/h2&gt;
&lt;p&gt;Ve středu jsem hlavně spravoval věci ve Fedoře.
Poslal jsem &lt;a href="https://github.com/sqlalchemy/mako/pull/328"&gt;PR do šablonovacího jazyka Mako&lt;/a&gt;,
který v Pythonu 3.10&amp;nbsp;narážel na varování, což pak rozbíjelo testy projektů,
které Mako používají a&amp;nbsp;varování ve svých vlastních testech berou jako&amp;nbsp;chyby.&lt;/p&gt;
&lt;p&gt;Taky jsem pokročil v balíčkování nové verze Pipenv, ale nestihl jsem to otestovat.
Miro se na to kouknul a&amp;nbsp;hned asi tři našel.
(Pipenv je, mimochodem, strašlivé mocnáctihlavé monstrum. Ale užitečné.)&lt;/p&gt;
&lt;h2 id="ctvrtek-planovani-apython-2"&gt;Čtvrtek: Plánování a&amp;nbsp;Python 2&lt;/h2&gt;
&lt;p&gt;Ve čtvrtek jsem (kromě extra velké týmové porady) vyndával z Fedoray věci,
které ještě pořád potřebují Python 2.
Zbývá jich už &lt;a href="https://fedora.portingdb.xyz/"&gt;jen 70&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="patek-prace-vkorporatu"&gt;Pátek: Práce v&amp;nbsp;korporátu&lt;/h2&gt;
&lt;p&gt;No a&amp;nbsp;v pátek jsem podobné nechtěné balíčky vyndával z budoucí verze &lt;a href="https://en.wikipedia.org/wiki/Red_Hat_Enterprise_Linux"&gt;RHEL&lt;/a&gt;u,
aby tam zbyly jen věci, které reálně můžeme nějaké to desetiletí&amp;nbsp;podporovat.&lt;/p&gt;</content><category term="misc"></category><category term="weekly"></category></entry><entry><title>Týdenní poznámky #1</title><link href="https://encukou.cz/blog/2021/01/08/cs-tydenni-01" rel="alternate"></link><published>2021-01-08T00:00:00+01:00</published><updated>2021-01-08T00:00:00+01:00</updated><author><name>Petr Viktorin</name></author><id>tag:encukou.cz,2021-01-08:/blog/2021/01/08/cs-tydenni-01</id><summary type="html">
&lt;p&gt;Utekl další týden (3. 1. – 8. 1.), a tak si sepisuju, co jsem dělal.&lt;/p&gt;
</summary><content type="html">

&lt;p&gt;Utekl další týden (3. 1. – 8. 1.), a&amp;nbsp;tak si sepisuju, co jsem&amp;nbsp;dělal.&lt;/p&gt;


&lt;h2 id="pondeli-email"&gt;Pondělí: email&lt;/h2&gt;
&lt;p&gt;Po dovolené jsem se přihlásil do práce a&amp;nbsp;svítilo na mě &lt;strong&gt;Inbox (1412)&lt;/strong&gt;.
Celý pracovní den jsem to procházel, odpovídal na jednodušší kousky a
složitější si zapisoval to úkolníčku.&lt;/p&gt;
&lt;p&gt;Večer jsem zase &lt;a href="https://www.youtube.com/watch?v=XOf46FLt78k"&gt;streamoval Freezeyt&lt;/a&gt;.
Přes minulý týden nikdo jiný na projektu nepracoval, takže z toho byly
dvě hodiny refactoringu konfigurace.
Doufám, že to k něčemu je – ale jedna ze &lt;a href="http://zpetnovazebnik.herokuapp.com/2020-brno-podzim/asteroids/"&gt;zpětných vazeb&lt;/a&gt; na &lt;em&gt;live coding&lt;/em&gt;
po začátečnickém kurzu byla:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Opět moc pěkná lekce, tyhle "celoprogramovací" mě baví asi&amp;nbsp;nejvíc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Takže asi v pohodě.
Až budou otázky, může to zase být víc o&amp;nbsp;odpovědích a&amp;nbsp;odbočkách.&lt;/p&gt;
&lt;h2 id="utery-cpython"&gt;Úterý: CPython&lt;/h2&gt;
&lt;p&gt;Úterý je den pro Python!&lt;/p&gt;
&lt;p&gt;Udělal jsem pár menších review ohledně izolace stavu modulů.
O&amp;nbsp;PEP 630&amp;nbsp;jsem psal i&amp;nbsp;minule, tak trochu víc detailů:&lt;/p&gt;
&lt;p&gt;Posledních pár let do Pythonu přispívám s tím, že modul – to co se
importuje – je objekt jako každý jiný.
Z jednoho &lt;code&gt;.py&lt;/code&gt; souboru se dá vytvořit několik modulových objektů, které
se chovají stejně, ale navzájem se neovlivňují.
To pak má výhody v tom, že aplikace může spustit Python několikrát za sebou,
nebo dokonce paralelně vedle sebe, s různým nastavením.
A&amp;nbsp;stejně by se měly chovat i&amp;nbsp;moduly napsané v C (nebo podobných jazycích),
jenže to zatím moc nejde, protože jednotlivé objekty navzájem ovlivňují.
Moje &lt;a href="https://www.python.org/dev/peps/pep-0630/"&gt;PEP 630&lt;/a&gt; problém popisuje a&amp;nbsp;ukazuje, jak ho&amp;nbsp;řešit.&lt;/p&gt;
&lt;p&gt;Hlavní myšlenka je v tom, že se všechny prostředky – paměť, Pythonní objekty,
otevřené soubory, a&amp;nbsp;kdo ví co všechno – navážou na objekt modulu.
Když jsou ty objekty dva, musí všechno být dvakrát.
A&amp;nbsp;problém je v tom, že v C je velice jednoduché použít statickou proměnnou,
která je v celém procesu jen jedna.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Modul &lt;a href="https://github.com/python/cpython/pull/24096"&gt;datetime&lt;/a&gt;
  jeden takový objekt používal, tak se z &lt;code&gt;static struct PyExpat_CAPI capi&lt;/code&gt;
  muselo udělat něco trochu složitějšího.&lt;/li&gt;
&lt;li&gt;Podobnou opravu &lt;a href="https://github.com/python/cpython/pull/24061"&gt;v modulu expat&lt;/a&gt;
  jsem zkontroloval potom, co hlavní review udělal&amp;nbsp;Victor.&lt;/li&gt;
&lt;li&gt;Změnu &lt;a href="https://github.com/python/cpython/pull/23124"&gt;v modulu array&lt;/a&gt;
  jsem začlenil, ale zapomněl jsem na detail, který autor
  &lt;a href="https://github.com/python/cpython/pull/24066"&gt;opravil vzápětí&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Udělal jsem další review na
  &lt;a href="https://github.com/python/cpython/pull/22632"&gt;opravu správy paměti při importování&lt;/a&gt;
  Jde hlavně o&amp;nbsp;chování v chybových situacích; Python při nich občas měl
  &lt;em&gt;refleak&lt;/em&gt; – zapoměl odevzdat kousek paměti kterou dál nevyužíval.
  Bohužel tomu neprošly automatické testy kvůli &lt;a href="https://bugs.python.org/issue42794"&gt;úplně jiné chybě&lt;/a&gt;
  a&amp;nbsp;když jsem to zkoušel testovat u&amp;nbsp;sebe, našel jsem zase úplně jinou chybu,
  která se neprojeví.
  Poslal jsem na ni &lt;a href="https://github.com/python/cpython/pull/24119"&gt;pull request&lt;/a&gt;,
  ale protože se v téhle oblasti nevyznám, bude ho potřeba ještě doladit.
  Původní oprava ale prošla a&amp;nbsp;příští úterý ji chci začlenit.
  (Snažím se to dělat když mám před sebou den dedikovaný pro Python,
  abych mohl reagovat když se něco po... nepodaří.)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/python/cpython/pull/19133"&gt;Oprava kopírování ukazatele&lt;/a&gt;,
  o&amp;nbsp;které jsem se zmínil minule, je&amp;nbsp;začleněná.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;O &lt;a href="https://github.com/python/cpython/pull/23903"&gt;přidání funkce PyType_GetName&lt;/a&gt;
  se stále diskutuje, i&amp;nbsp;když&amp;nbsp;pomalu.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No a&amp;nbsp;pak jsem začal definovat stabilní ABI.
Napsal jsem si na to formát (a&amp;nbsp;jednoduchý parser), protože dat je moc a
potřebuju v nich mít co nejlepší&amp;nbsp;přehled.&lt;/p&gt;
&lt;h2 id="streda-python-310"&gt;Středa: Python 3.10&lt;/h2&gt;
&lt;p&gt;Ve středu jsem napsal &lt;a href="https://github.com/pypa/setuptools/pull/2523"&gt;dvouřádkový pull request&lt;/a&gt;. Byla to práce na celý den,
protože jsem napřed musel porozumět tomu, co ten kód vlastně dělá a&amp;nbsp;jaké
jsou alternativy.&lt;/p&gt;
&lt;p&gt;Pull request v Setuptools odstraňuje použití funkce &lt;code&gt;load_module&lt;/code&gt;, která od
Pythonu 3.12&amp;nbsp;nebude fungovet.
Ale potřebujeme se jí zbavit už teď, protože v&amp;nbsp;Pythonu 3.10&amp;nbsp;začala házet
varování a&amp;nbsp;u&amp;nbsp;některých balíčků, které na Setuptools (resp. &lt;code&gt;pkg_resources&lt;/code&gt;)
závisí, selžou testu když na varování&amp;nbsp;narazí.&lt;/p&gt;
&lt;p&gt;Kromě toho bylo v týmu pár plánovacích porad, takže to nebylo doopravdy na
celý pracovní den. Ale skoro.&lt;/p&gt;
&lt;h2 id="ctvrtek-py3c"&gt;Čtvrtek: py3c&lt;/h2&gt;
&lt;p&gt;Ve čtvrtek jsem dělal pár menších věcí pro Fedoru.
Hlavní byla aktualizace &lt;a href="https://py3c.readthedocs.io"&gt;py3c&lt;/a&gt;, projektu
na portování C-API modulů z Pythonu 2&amp;nbsp;na Python 3.
Byl tam menší zádrhel s generováním dokumentace, testy na Travis CI trvaly tak
dlouho, že jsem &lt;a href="https://github.com/encukou/py3c/pull/39"&gt;přešel na GitHub Actions&lt;/a&gt;.
To zabralo překvapivě moc času, protože na GitHub Actions se nedá
testovat na architektuře POWER, což se &lt;a href="https://github.com/encukou/py3c/pull/33"&gt;nelíbilo jistému Gerritovi&lt;/a&gt;,
který POWER o&amp;nbsp;testů nedávno přidal.
S Mirovou pomocí jsme testy vypiplali do stavu, kdy se stydím že nedávám tolik
úsilí do užitečnějších projektů ;)&lt;/p&gt;
&lt;h2 id="patek-planovani"&gt;Pátek: plánování&lt;/h2&gt;
&lt;p&gt;V pátek jsem si urovnal pracovní úkolníček, zamyslel se co dál,
a&amp;nbsp;několik menších věcí co už dlouho hnily vyřešil nebo posunul&amp;nbsp;kupředu.&lt;/p&gt;</content><category term="misc"></category><category term="weekly"></category></entry><entry><title>Týdenní poznámky #0</title><link href="https://encukou.cz/blog/2021/01/01/cs-tydenni-00" rel="alternate"></link><published>2021-01-01T00:00:00+01:00</published><updated>2021-01-01T00:00:00+01:00</updated><author><name>Petr Viktorin</name></author><id>tag:encukou.cz,2021-01-01:/blog/2021/01/01/cs-tydenni-00</id><summary type="html">&lt;p&gt;Utekl další týden (28. 12.–1. 1.), a tak si po vzoru
&lt;a href="https://honzajavorek.cz/blog/#archives-2020"&gt;Honzy Javorka&lt;/a&gt;
sepisuju, co jsem dělal.
Uvidíme, třeba se mi to podaří dělat nějak pravidelněji.&lt;/p&gt;
&lt;p&gt;Tento týden byl zajímavý tím, že jsem měl dovolenou.
Šetřil jsem si ji na renovaci nového bytu, nebo dokonce na stěhování,
ale klíčové lidi napadl virus a tak nakonec nebylo moc co dělat
a byt stále není hotový.
A tak jsem seděl za počítačem.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Utekl další týden (28. 12.–1. 1.), a&amp;nbsp;tak si po vzoru
&lt;a href="https://honzajavorek.cz/blog/#archives-2020"&gt;Honzy Javorka&lt;/a&gt;
sepisuju, co jsem dělal.
Uvidíme, třeba se mi to podaří dělat nějak&amp;nbsp;pravidelněji.&lt;/p&gt;
&lt;p&gt;Tento týden byl zajímavý tím, že jsem měl dovolenou.
Šetřil jsem si ji na renovaci nového bytu, nebo dokonce na stěhování,
ale klíčové lidi napadl virus a&amp;nbsp;tak nakonec nebylo moc co dělat
a&amp;nbsp;byt stále není hotový.
A&amp;nbsp;tak jsem seděl za počítačem.&lt;/p&gt;


&lt;p&gt;Dělám na několika projektech, které jsou schopny zabrat veškerý můj čas.
V práci to řeším tak, že si na každý projekt vyhradím den v týdnu.
Docela to funguje – dokud není víc projektů než těch dnů – a&amp;nbsp;tak jsem si
podobně rozvrhl i „volný“ týden.&lt;/p&gt;
&lt;h2 id="pondeli-naucse"&gt;Pondělí: Naucse&lt;/h2&gt;
&lt;p&gt;Pondělí jsem začal převáděním z Travis CI na GitHub Actions.
Travis-ci.org je totiž má poslední dobou dost dlouhé fronty a&amp;nbsp;GHA jsou většinou
mnohem rychlejší.
Převedl jsem repozitáře &lt;a href="https://github.com/pyvec/pyvo-data/pull/379"&gt;pyvo-data&lt;/a&gt; a&amp;nbsp;&lt;a href="https://github.com/pyvec/pyvo.cz/pull/142"&gt;pyvo.cz&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Pak jsem pohnul s už dlouho rozdělaným
&lt;a href="https://github.com/pyvec/naucse/pull/42"&gt;pull requestem na lepší práci s časovými zónami&lt;/a&gt; na naucse.python.cz.
Vzhledem k tomu, že jsou zatím všechny kurzy v ČR, je to tak trochu zbytečné
puntičkářství.
Ale myslím, že to ten kód aspoň trošičku&amp;nbsp;zpřehlednilo.&lt;/p&gt;
&lt;p&gt;Budu se na naucse muset začít dívat víc jako na produkt a&amp;nbsp;míň jako na hobby
projekt, kde zkouším blbůstky jako návrh detalů API které nikdo moc&amp;nbsp;nepoužívá.&lt;/p&gt;
&lt;p&gt;Pak jsem rozpracoval &lt;a href="https://github.com/pyvec/naucse/issues/27"&gt;aktualizaci CSS pro Notebookové lekce&lt;/a&gt;,
což jsem ale nedokončil.
Design není moje nejsilnější stránka.&lt;/p&gt;
&lt;p&gt;Večer pak byl &lt;a href="https://www.youtube.com/watch?v=tUQQ1g2VD7I&amp;amp;list=PLFt-PM7J_H3EU5Oez3ZSVjY5pZJttP2lT&amp;amp;index=28"&gt;další stream o&amp;nbsp;projektu &lt;code&gt;freezeyt&lt;/code&gt;&lt;/a&gt;.
Protože minulý týden skončil začátečnický kurz, byl stream dřív a&amp;nbsp;dvakrát delší
než normálně.
S Adél jsme opravili chyby v testech na Windows, Davidova testovací Django
aplikace je hotová, a&amp;nbsp;já pokračuju s refactoringem, který mj. umožní ukládat
výstup jinam než na disk. Třeba rovnou do Gitového&amp;nbsp;repozitáře.&lt;/p&gt;
&lt;h2 id="utery-cpython-review"&gt;Úterý: CPython Review&lt;/h2&gt;
&lt;p&gt;V úterý jsem se kouknul na Pull Requesty v Pythonu, na které bych mohl
udělat review.
Specializuju na C API a&amp;nbsp;posledních 7&amp;nbsp;let navrhuju [nové a&amp;nbsp;lepší API pro moduly],
a&amp;nbsp;tak je spousta review okolo překlápění modulů na tohle nové API.
Jsem rád, že to lidi zajímá natolik, že si s tím dají práci.
Na druhou stranu je to dost drbačka, a&amp;nbsp;někdy nestíhám – pomocníci (a&amp;nbsp;jejich
mentor, který v tomhle vidí dobrý úvod do céčkových částí Pythonu) na tohle
často mají mnohem víc času než&amp;nbsp;já.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Erlendovo &lt;a href="https://github.com/python/cpython/pull/23124"&gt;převedení modulu &lt;code&gt;array&lt;/code&gt;&lt;/a&gt;
  je téměř hotové.&lt;/li&gt;
&lt;li&gt;Hai Shi-ovo &lt;a href="https://github.com/python/cpython/pull/23405"&gt;převedení modulu &lt;code&gt;_functools&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Další review jsem udělal na jiné změny:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/python/cpython/pull/23903"&gt;Přidání funkce &lt;code&gt;PyType_GetName&lt;/code&gt;&lt;/a&gt;
  jsem jen zběžně okomentoval a &lt;a href="https://github.com/python/cpython/pull/15892#discussion_r549695085"&gt;upozornil&lt;/a&gt; na něj pár lidí, které by to mohlo
  zajímat.
  Zjistil jsem že jména typů v Pythonu jsou nečekaně zamotaná záležitost
  a&amp;nbsp;rozhodnout, co &lt;em&gt;přesně&lt;/em&gt; má dělat funkce co vrací jméno typu, bude nejspíš
  potřebovat trochu delší rešerši.
  Nevím, jestli si tohle mám vzít na svoji&amp;nbsp;zodpovědnost.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/python/cpython/pull/22632"&gt;Opravu správy paměti při importech&lt;/a&gt;
  jsem si prohlédl docela podrobně, ale je to docela stará změna a&amp;nbsp;bylo ji
  potřeba spojit s aktuálním stavem repozitáře.
  Bohužel se při tom rozbilo něco dalšího, tak se na to příště kouknu&amp;nbsp;znova.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/python/cpython/pull/19133"&gt;U&amp;nbsp;opravy kopírování ukazatele&lt;/a&gt;
  jsem vzal navrhnuté změny a&amp;nbsp;dal jsem je do nového PR.
  Autor původního PR totiž už pár měsíců neodpovídá na komentáře.
  (Ale jinak je to fajn člověk ☺)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Večer jsem pak aktualizoval tenhle blog a&amp;nbsp;začal psát tenhle příspěvek.
Potěšilo mě, jak málo změn bylo potřeba při aktualizaci na novou verzi
&lt;a href="https://docs.getpelican.com/en/stable/index.html"&gt;Pelicanu&lt;/a&gt;&amp;nbsp;udělat.&lt;/p&gt;
&lt;h2 id="streda-actvtek-abi3pep"&gt;Středa a&amp;nbsp;čtvtek: abi3&amp;nbsp;PEP&lt;/h2&gt;
&lt;p&gt;Ve středu jsem psal PEP.
PEP (Python Enhancement Proposal) je (většinou) dokument, který vysvětluje
plánovanou změnu v Pythonu, jako přidání &lt;a href="https://www.python.org/dev/peps/pep-0492"&gt;nového klíčového slova&lt;/a&gt;
nebo &lt;a href="https://www.python.org/dev/peps/pep-0498/"&gt;řetězcových šablon&lt;/a&gt;.
Můj PEP bude o&amp;nbsp;tom, na co chci dál v Pythonu zaměřit.
Tak trochu novoroční předsevzetí.&lt;/p&gt;
&lt;p&gt;A&amp;nbsp;co že to chci dělat?
Oživit &lt;a href="https://docs.python.org/3/c-api/stable.html"&gt;stabilní ABI&lt;/a&gt; Pythonu, které aktuálně není v moc dobrém stavu
(např. nikdo vlastně neví, co to přesně je), a&amp;nbsp;napsat testy a&amp;nbsp;procesy,
aby se v budoucnu tolik nerozbíjelo.&lt;/p&gt;
&lt;p&gt;Za středu a&amp;nbsp;čtvrtek jsem dokument dostal do &lt;a href="https://github.com/encukou/abi3/blob/main/PEP.rst"&gt;podoby&lt;/a&gt;,
ve které jsem se ho nebál ho poslat do &lt;a href="https://mail.python.org/archives/list/capi-sig@python.org/thread/PMM5QG4IAL6LOMNFXNHW72INSCN4JC5H/"&gt;diskuze&lt;/a&gt;, aby se k němu vyjádřili
i&amp;nbsp;ostatní kdo jsou v téhle oblasti aktivní.
Další důvod proč píšu dokument je totiž ten, že chci abychom se zkoordinovali.
Aktuálně má každý kdo s tímto tématem chce pomoct trochu jinou představu
o&amp;nbsp;konečném výsledku. S takovou z toho žádný rozumný výsledek&amp;nbsp;nebude.&lt;/p&gt;
&lt;h2 id="patek-svatek"&gt;Pátek – svátek&lt;/h2&gt;
&lt;p&gt;No a&amp;nbsp;v pátek byl svátek, který jsem se rozhodl strávit bez počítače.
O&amp;nbsp;výletech na kopec tenhle blog není, tak se nic psát nebudu.
Ahoj za týden!&lt;/p&gt;
&lt;h2 id="aco-vy"&gt;A&amp;nbsp;co vy?&lt;/h2&gt;
&lt;p&gt;Honza, od kterého jsem okopíroval tenhle formát blogu,
má &lt;a href="https://honzajavorek.cz/blog/neni-to-zavod/"&gt;článek&lt;/a&gt; pro všechny, kterým výpis všeho, co jsem za týden udělal,
přináší deprese.
Se spoustou z toho – i&amp;nbsp;když samozřejmě ne se vším – se ztotožňuju. 
Není to závod!&lt;/p&gt;
&lt;p&gt;Navíc doporučím &lt;a href="https://www.youtube.com/watch?v=N_gysDr2gfc&amp;amp;t=3423s"&gt;Lumírovu přednášku&lt;/a&gt; plnou tipů pro produktivitu,
ve které zmiňuje, jak je dobré si sepsat, co člověk za den/týden udělal.
Pokud to neděláte, pravděpodobně vám samým toho spousta&amp;nbsp;uniká.&lt;/p&gt;</content><category term="misc"></category><category term="weekly"></category></entry><entry><title>PyCon 2016 Report</title><link href="https://encukou.cz/blog/2016/06/20/pycon-report" rel="alternate"></link><published>2016-06-20T00:00:00+02:00</published><updated>2016-06-20T00:00:00+02:00</updated><author><name>Petr Viktorin</name></author><id>tag:encukou.cz,2016-06-20:/blog/2016/06/20/pycon-report</id><summary type="html">&lt;p&gt;I attended PyCon 2016, the annual Python language conference, which took part
between May 28th to June 5th.&lt;/p&gt;
&lt;p&gt;Here's a long, rambling and somewhat personal report of what I got from
the conference.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I&amp;nbsp;attended PyCon 2016, the annual Python language conference, which took part
between May 28th to June 5th.&lt;/p&gt;
&lt;p&gt;Here's&amp;nbsp;a&amp;nbsp;long, rambling and somewhat personal report of what I&amp;nbsp;got from
the conference.&lt;/p&gt;


&lt;p&gt;I&amp;nbsp;found accommodation through Airbnb, and ended up staying with Jov,
a&amp;nbsp;laid-back drummer.  He apparently prepared a&amp;nbsp;lot of info about local
breweries to share with his guest, but as I&amp;nbsp;don't drink, we had to find
other topics to talk about.  Which we did!
I'm never going to stay at a&amp;nbsp;conference hotel again if I&amp;nbsp;can help
it. (Except at PyCon PL, of course.)&lt;/p&gt;
&lt;h3 id="language-summit"&gt;Language Summit&lt;/h3&gt;
&lt;p&gt;Saturday and Sunday before the main conference were "tutorial days", with
opportinities to learn various technologies, either paid by the attendees
or sponsored.  Unfortunately, I&amp;nbsp;registered late enough that the interesting
free ones were already full.  However, on Saturday another event was held:
the &lt;a href="https://us.pycon.org/2016/events/langsummit/"&gt;Language Summit&lt;/a&gt;, to which Nick Coghlan kindly invided&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;The Summit is a&amp;nbsp;gathering of Python core developers and people invited by them
at which language issues are discussed.  Though there are no recordings,
the Summit was covered by Jake Edge in &lt;a href="https://lwn.net/Articles/688969/"&gt;LWN&lt;/a&gt;.
My talk aimed to relate the perspective of Fedora (and redistributors in
general) to Python developers.
Specifically, I&amp;nbsp;talked about:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python 3&amp;nbsp;porting: Many people in the Python ecosystem use the &lt;a href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt;
    as the canonical list of Python software, so tools tracking Python 3
    porting progress (e.g. &lt;a href="https://python3wos.appspot.com/"&gt;WoS&lt;/a&gt;) are usually biased against system tools
    (e.g. DNF, Samba, Openstack) and applications (e.g. pitivi, Inkscape).
    Fedora's &lt;a href="http://fedora.portingdb.xyz/"&gt;PortingDB&lt;/a&gt; arguably gives a&amp;nbsp;better subset of "popular open-
    source packages".  I&amp;nbsp;gave an introduction to PortingDB, how we use it
    and how to look at the data.  I&amp;nbsp;also mentioned that we're nearing having
    50% of packages ported, hopefully as soon as Fedora 25.
    I&amp;nbsp;talked about major software that is not ported yet. Anything based on
    GTK2&amp;nbsp;will need to be ported to GTK 3&amp;nbsp;to get Python 3&amp;nbsp;support; wxWidgets
    support for py3&amp;nbsp;is still incomplete. The other blockers are Ansible,
    enterprise-y software (Samba, FreeIPA), VCSs (Mercurial, Bazaar),
    and large parts of the Fedora infrastructure.  Unsurprisingly,
    all are projects that are not published on PyPI.
    I&amp;nbsp;also linked porting guides: &lt;a href="https://py3c.readthedocs.io/en/latest/guide.html"&gt;py3c&lt;/a&gt; for extension modules, the &lt;a href="http://python-rpm-porting.readthedocs.io/en/latest/"&gt;RPM
    porting Guide&lt;/a&gt; for RPMs, and the upcoming Conservative Porting
    Guide.&lt;/li&gt;
&lt;li&gt;pyp2rpm &amp;amp; COPR PyPI rebuilds: I&amp;nbsp;talked briefly how we're trying to
    rebuild all PyPI packages in COPR, which would help with packaging
    Python 3&amp;nbsp;compatible versions of software.  Tying in to a&amp;nbsp;previous talk,
    I&amp;nbsp;mentioned that since running tests is part of building a&amp;nbsp;RPM,
    these automatic COPR builds could provide integration tests for
    Python packages – something both Fedora and the Python ecosystem
    need.&lt;/li&gt;
&lt;li&gt;System Python: I&amp;nbsp;presented the need for a&amp;nbsp;lighter standard library
    that could be used for minimal systems.  More than three-fourths of
    Python's&amp;nbsp;stdlib are not needed at runtime by most applications, and
    parts like the test suite and TK are already split out of python-libs
    in Fedora.  The idea was met with understanding, though (rather
    surprisingly for me) Kushal Das from Fedora Cloud objected to
    splitting the stdlib, preferring a&amp;nbsp;full Python even in the base cloud
    image.
    I&amp;nbsp;noted that splitting the standard library, and letting packages
    opt-in to defining exactly which parts they need, might be useful for
    projects like MicroPython, or making Python work on Android.  I&amp;nbsp;learned
    that this might be good for Windows as well.  However, I&amp;nbsp;said that
    neither I&amp;nbsp;nor Red Hat's&amp;nbsp;python-maint has resources to commit to a
    general solution yet.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Overall, the audience was responsive and asked good questions. We ran a&amp;nbsp;bit
over the 20&amp;nbsp;minutes I&amp;nbsp;had allocated, but at that point running over was
a&amp;nbsp;common theme at Language&amp;nbsp;Summit.&lt;/p&gt;
&lt;p&gt;Other Language Summit talks focused on security, porting to Python 3,
removing the GIL, core dev workflows, automated testing, gradual typing,
and JITs.  Read the LWN reports if you're&amp;nbsp;interested.&lt;/p&gt;
&lt;p&gt;I&amp;nbsp;went to see the city on Sunday, and returned on Monday for the first
day of conference talks.&lt;/p&gt;
&lt;h2 id="monday"&gt;Monday&lt;/h2&gt;
&lt;p&gt;Meals at PyCon took place in the Expo hall, among sponsor booths.  Most
sponsors were either developing Python apps, or providing services to
deploy them, debug them, or otherwise make Python developers' lives&amp;nbsp;easier.&lt;/p&gt;
&lt;p&gt;I&amp;nbsp;was happy to see a&amp;nbsp;section of the Expo Hall dedicated to open-source
projects: Cookiecutter, BeeWare, Django Girls and PyLadies, Read the Docs,
Plone, Pyramid, and the Recurse Center.  Of course, the were also open-source
projects in the "paid" section: I&amp;nbsp;counted Ansible, Sentry, OpenShift,
Elastic, and Docker.&lt;/p&gt;
&lt;p&gt;Below are my notes from talks, open spaces, and discussions I&amp;nbsp;attended.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ned Batchelder: Machete Mode Debugging.&lt;/strong&gt;
  This talk didn't have much new material for me, but it illustrates what
  for me is a&amp;nbsp;large part of Python's&amp;nbsp;appeal: it's&amp;nbsp;possible to do very
  effective (but nasty) hacks to solve a&amp;nbsp;problem quickly, once one knows
  the language internals.  A&amp;nbsp;necessary part of what makes this appealing
  is then the resistance to these hacks ever leaving a&amp;nbsp;development machine.
  This resistance is largely cultural: Python could be a&amp;nbsp;very different
  language even if the syntax stayed the&amp;nbsp;same.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Brett Cannon, Dino Viehland: Pyjion.&lt;/strong&gt;
  This was a&amp;nbsp;rehash of the Language Summit talk, with some points
  elaborated further.  Adding JIT hooks to core Python is a&amp;nbsp;great idea
  that could make speeding up the reference interpreter – or creaing
  debugging tool – easy and thus allowing healthy competition between
  various approaches.  (It would also allow proprietary speed-up addons;
  but hopefully Microsoft has learned the idea that collaboration
  works better.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Drew Fisher: Object-Capabilities, Cap'n Proto.&lt;/strong&gt;
  Object capabilities are a&amp;nbsp;great framework for building secure systems.
  Sadly, not the default in today's&amp;nbsp;frameworks.
  I&amp;nbsp;didn't see any functional programming talks at PyCon; I&amp;nbsp;assume this
  is because they all tend to be similar and everybody knows the material
  by now.  I&amp;nbsp;can't wait until object capabilities reac a&amp;nbsp;similar "exotic
  but well-known" status.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Open Space: Meetup Organizers.&lt;/strong&gt;
  As the Pyvo meetups in Brno are struggling with too many attendees,
  we're planning to add parallel beginner-focused events to split the
  audience.  It turns out many meetups across the world are doing the same,
  and hopefully I'll be able to use my notes in Brno soon.
  (This Open Space continued with another session on Wednesday.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Open Space: Python and Rust.&lt;/strong&gt;
  When it comes to Rust, I'm interested in the concept of a&amp;nbsp;Mozilla-supported
  compiled language, and despite never trying it for a&amp;nbsp;serious project,
  whenever I&amp;nbsp;read about the technical choices that go in the languahe,
  I&amp;nbsp;have nothing but respect for its developers.
  Since I&amp;nbsp;don't know much about Rust I&amp;nbsp;planned to join the Rust open space
  as a&amp;nbsp;silent lurker, but I&amp;nbsp;was able to provide some details about CPython
  internals that might make it easier to build Python-Rust&amp;nbsp;bridges.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Open Space: IoT, MicroPython, automation.&lt;/strong&gt;
  This open space had an interesting topic and great people (Nicholas
  Tollervey and Paulus Schoutsen were both there), but there was a&amp;nbsp;lack
  of good talking points, so I&amp;nbsp;didn't get much more out of it than an
  urge to try giving a&amp;nbsp;MicroPython-themed lightning talk.
  And I&amp;nbsp;did get to hold a&amp;nbsp;BBC Micro:Bit :)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lightning Talks.&lt;/strong&gt;
  The best part of the conference – a&amp;nbsp;mixt of mini-talks ranging from
  funny to practical to dead serious.  Professionally, the most important
  was probably about "star_destroyer" – a&amp;nbsp;tool that removes "import *"
  statements in a&amp;nbsp;smart way.&lt;/p&gt;
&lt;p&gt;After the talks, Sentry and Linode sponsored an evening at the local arcade,
even providing quarters to feed the Marios and Pacmans.  Even nerdier than
PyCon itself.&lt;/p&gt;
&lt;h2 id="tuesday"&gt;Tuesday&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Guido van Rossum: Keynote&lt;/strong&gt;
  Guido is a&amp;nbsp;great language designer and community leader, but
  I'm not much of a&amp;nbsp;fan of his keynotes :(&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parisa Tabriz: Keynote&lt;/strong&gt;
  A&amp;nbsp;talk about security.  To me the most important point was that while
  software engineers spend time thinking about making things work, security
  engineers think about making things break.  It's&amp;nbsp;a&amp;nbsp;mindset everyone
  should slip into at times.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Daniele Procida: Documentation-driven development.&lt;/strong&gt;
  Django is a&amp;nbsp;perfect example of how great documentation, great community,
  and great product go together.  Daniele talked about the importance of
  the process of documenting, rather than having documentation, and
  he process of informing, rather than publishing information.  And he
  explained a&amp;nbsp;few guidelines for great&amp;nbsp;documentation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Anthony Scopatz: xonsh.&lt;/strong&gt;
  xonsh is a&amp;nbsp;shell that is, syntax-wise, a&amp;nbsp;hybrid between (Ba)sh and Python.
  Based on the presentation, it looks like the merge was (surprisingly for
  me) done relatively cleanly and respectfully.  I&amp;nbsp;need to try it out
  soon.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Glyph: Shipping Software To Users With Python.&lt;/strong&gt;
  An overview of practices for shipping Python software: the good and the
  bad, the existing ones, the near future, and the ideal state.
  I've heard more than one person say this was the most informative talk
  at Pycon.  I&amp;nbsp;seem to be more interested in teaching programming and
  building tools for programmers than in real-world apps, but this was still
  a&amp;nbsp;great overview.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Paul Kehrer: Reliably Distributing Compiled Modules.&lt;/strong&gt;
  Packaging is perhaps the area of Python ecosystem that is changing most
  rapidly, so good talks on these topics are always welcome – especially
  if it broadens awareness of manylinux&amp;nbsp;wheels.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Amber Brown: The Report Of Twisted’s&amp;nbsp;Death.&lt;/strong&gt;
  Unfortunately, I&amp;nbsp;didn't get much out of this talk, but other people's
  reactions were positive, so it's&amp;nbsp;probably just me.
  Amber's&amp;nbsp;talk at the Language Summit was much&amp;nbsp;better.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Katie Bell: The computer science of marking computer science assignments.&lt;/strong&gt;
  This talk ended up mainly focusing on computational geometry, which
  is a&amp;nbsp;fun subject.  Although it had "computer science" in the title,
  it was a&amp;nbsp;little underresearched – but as Katie learned some better
  techniques from the audience, everyone kept&amp;nbsp;smiling.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Russell Keith-Magee: A&amp;nbsp;tale of two cellphones: Python on Android and iOS.&lt;/strong&gt;
  I&amp;nbsp;consider this the most important talk of this PyCon.  Russel's&amp;nbsp;BeeWare
  project is not the first to bring Python to mobile phones (and I&amp;nbsp;have
  big respect for Kivy), but it aims to make Python a&amp;nbsp;first-class language
  for native apps. Also, it seems designed from the ground up for long-term
  maintainability, both technical and social.
  I&amp;nbsp;had to leave in the middle of the talk to prepare my lightning talk,
  but I&amp;nbsp;made sure to watch the recording before the sprints&amp;nbsp;later.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lightning Talks.&lt;/strong&gt;
  My lightning talk was on the fun side of the spectrum: how to make
  a&amp;nbsp;cheap glowing, Wi-Fi controlled balloon.
  A&amp;nbsp;notable talk in this block by Nathaniel Smith introduced &lt;code&gt;async yield&lt;/code&gt;.
  I&amp;nbsp;asked Nathaniel afterwards if he's&amp;nbsp;planning to add this feature (which
  I&amp;nbsp;think is conspicuously missing from Python) to the language, and he said
  it's&amp;nbsp;actually the prototype just for that. Yipee!
  Oh, and Larry Hastings gave a&amp;nbsp;very entertaining talk, not about Python
  but about speed gaming.  I&amp;nbsp;heard about #dsdad before, but I&amp;nbsp;had no idea
  he's&amp;nbsp;a&amp;nbsp;Python release&amp;nbsp;manager!&lt;/p&gt;
&lt;p&gt;The day ended with a&amp;nbsp;PyLadies charity auction, which was quite fun but
the wrong kind of fun for me, I&amp;nbsp;guess.&lt;/p&gt;
&lt;h2 id="wednesday"&gt;Wednesday&lt;/h2&gt;
&lt;p&gt;Wednesday started with keynotes (about the Python Software Foundation,
and about Plone), the first of which I&amp;nbsp;missed for the Meetups open space.
As for Plone, I&amp;nbsp;definitely suggest the talk to anyone interested in
designing sustainable projects – the history of such a&amp;nbsp;large and long-lived
project is fascinating.&lt;/p&gt;
&lt;p&gt;After the keynotes, there was the poster session. Some notes from there:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hdbscan – a&amp;nbsp;library I&amp;nbsp;just saw mentioned at Pyvo Ostrava was here
    with its authors.&lt;/li&gt;
&lt;li&gt;An interesting system for data visualization was presented, but
    unfortunately it'll only be open-sourced after publication of the
    paper.&lt;/li&gt;
&lt;li&gt;PyMoms – meetups with provided childcare. I&amp;nbsp;need to suggest this to
    the local PyLadies.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And then talks resumed:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Anne DeCusatis: More Than Binary: Inclusive Gender Collection and You.&lt;/strong&gt;
  I&amp;nbsp;went to this talk more for the discussion at the end than for the
  talk itself.  In English, the only part of the language that's&amp;nbsp;different
  between genders is pronouns (he/she), and there are efforts to be more
  welcoming to people who are neither or both male and/or female.
  However, the Czech language only supports the case of an animate object
  being either male or female.  I&amp;nbsp;would imagine this makes it practically
  mandatory for non-binary people to choose one of the two, leading
  to public perception that non-binary people just don't exist.  But, the
  fact that they do exist is just about the only thing in this area that
  I&amp;nbsp;can be sure about.  And, as we all know, diversity is important – both
  diversity of programmers, to get various points of view, and diversity
  of users, so that we don't make some people's&amp;nbsp;lives harder by just not
  thinking about them in our designs.
  The speaker sadly couldn't provide any pointers for exploring this space
  further, but I&amp;nbsp;got some from people standing&amp;nbsp;by.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Laura Rupprecht: What can software engineers learn from the medical field?&lt;/strong&gt;
  I&amp;nbsp;came late, as discussion from the previous talk took more than the break.
  Beyond the concept of "triage", which comes from medical field, there
  are are other concepts we can learn from doctors.  The one I&amp;nbsp;liked was
  the fact that teaching hospitals have better outcomes.  The software
  world reflect this in code reviews, pair programming, and internships.
  I&amp;nbsp;believe software development internships – or even apprenticeships –
  should be &lt;em&gt;much&lt;/em&gt; more common than they are now, and they should serve both
  to train new contributors/employees, and to ensure simplicity – and thus
  maintainability – of the resulting&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Jacob Kovac: Revitalizing Python Game Development.&lt;/strong&gt;
  This was a&amp;nbsp;talk about Kivy, which does "Packaging", "Performance", and
  "Platforms" right for Python-based games.
  I&amp;nbsp;like Kivy – I&amp;nbsp;made software for my Master's&amp;nbsp;thesis in it – but it
  always felt as a&amp;nbsp;monolith that's&amp;nbsp;a&amp;nbsp;bit removed from the Python ecosysyem.
  Still, just like Django is currently the king of web frameworks, I&amp;nbsp;would
  not object to Kivy becoming the king for Python game development.
  I&amp;nbsp;believe the project needs much better community management,&amp;nbsp;though.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;K&amp;nbsp;Lars Lohn: Keynote.&lt;/strong&gt;
  This was a&amp;nbsp;masterpiece of a&amp;nbsp;keynote. It brought tears to my&amp;nbsp;eyes.&lt;/p&gt;
&lt;p&gt;In the evening, I&amp;nbsp;got together with Christian Heimes, Paul Hildebrandt,
Katie Bell, and a&amp;nbsp;couple other people for dinner at the McMenamins School,
a&amp;nbsp;elementary school turned into a&amp;nbsp;hotel and&amp;nbsp;restaurant.&lt;/p&gt;
&lt;h2 id="sprints-thursday-friday-sunday"&gt;Sprints (Thursday, Friday, Sunday)&lt;/h2&gt;
&lt;p&gt;I&amp;nbsp;sprinted on CPython, and got Nick Coghlan and Eric Snow review and refine
my &lt;a href="https://github.com/encukou/peps/blob/module-state-access/pep-9999.txt"&gt;upcoming PEP&lt;/a&gt;.  It felt like several weeks of work getting done in two
days.
Late Friday, after I&amp;nbsp;sendt the pre-PEP to review, Ubuntu's&amp;nbsp;Matthias Klose
told me about a&amp;nbsp;file naming problem in Python 3&amp;nbsp;versions of Samba's&amp;nbsp;supporting
packages.  We discussed until we identified the problem and found a&amp;nbsp;possible
solution (which still needs to be implemented).
After that I&amp;nbsp;went to the BeeWare table and picked a&amp;nbsp;task: getting the float
test suite to pass in VOC, the Python-to-Java compiler used for Android
support.  I&amp;nbsp;found out this required writing &lt;code&gt;float.__repr__()&lt;/code&gt;, since the
tests do textual comparisons, so I&amp;nbsp;didn't finish by a&amp;nbsp;long shot.
I&amp;nbsp;took Saturday off, and returned on Sunday to finish a &lt;code&gt;__repr__&lt;/code&gt;
implementation that usually does the same thing as CPython's (and never gives
an unreasonable result – it will just sometimes show an extra digit).
The atmosphere at the BeeWare table (and, for example, at the Cookiecutter
table beside it) was extremely pleasant and welcoming, something I&amp;nbsp;need to
learn to emulate when I'll run&amp;nbsp;sprints.&lt;/p&gt;
&lt;p&gt;During Sunday, lots of people left to catch their planes, including Russel
the BeeWare sprint leader, so my pull request was merged only some time
next week.
After the sprints, I&amp;nbsp;got some Fedora swag from Remy to bring back to Brno,
and joined fellow BeeWare sprinters – Jeremy, Marina and Holly – for dinner
and board games.&lt;/p&gt;
&lt;p&gt;And that was it!  I&amp;nbsp;spent a&amp;nbsp;few days after the conference enjoying the city
of Portland, then hopped on a&amp;nbsp;train to Seattle and back&amp;nbsp;home.&lt;/p&gt;</content><category term="misc"></category><category term="conference"></category><category term="pycon"></category></entry><entry><title>First Layer Patterns with Slic3r Modifier Objects</title><link href="https://encukou.cz/blog/2015/10/25/en-slic3r-first-layer-patterns" rel="alternate"></link><published>2015-10-25T00:00:00+02:00</published><updated>2015-10-25T00:00:00+02:00</updated><author><name>Petr Viktorin</name></author><id>tag:encukou.cz,2015-10-25:/blog/2015/10/25/en-slic3r-first-layer-patterns</id><summary type="html">&lt;p&gt;I've built a 3D printer, and found a cool effect I wasn't able to
find on the Internet yet.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I've built a&amp;nbsp;3D printer, and found a&amp;nbsp;cool effect I&amp;nbsp;wasn't able to
find on the Internet yet.&lt;/p&gt;


&lt;p&gt;&lt;a href="https://encukou.cz/images/2015-10-25-slic3r/first-layer.jpg"&gt;&lt;img alt="What I'll be describing" class="size-auto" src="https://encukou.cz/images/2015-10-25-slic3r/first-layer.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="my-setup"&gt;My Setup&lt;/h2&gt;
&lt;p&gt;I&amp;nbsp;haven't blogged about my 3D printer yet, so let's&amp;nbsp;quickly get that out
of the way.&lt;/p&gt;
&lt;p&gt;I&amp;nbsp;built a&amp;nbsp;modified &lt;a href="https://github.com/RepRap4U/RebeliX"&gt;RebeliX&lt;/a&gt; printer
at a&amp;nbsp;workshop.
(If you want to build a&amp;nbsp;printer, I'd really recommend you find a&amp;nbsp;workshop
nearby, rather than trying to figure out everything by yourself.
Tweaking something that already works is so much nicer than debugging an
unfamiliar system. And being able to ask experts anything is invaluable.)&lt;/p&gt;
&lt;p&gt;I&amp;nbsp;use Fedora's&amp;nbsp;3D printing stack (conveniently curated by my colleague
&lt;a href="http://hroncok.cz/"&gt;Miro Hrončok&lt;/a&gt;, who got me into this in the first place),
so it's&amp;nbsp;all nicely open-source and open-hardware.
The three main programs I&amp;nbsp;use are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://copr.fedoraproject.org/coprs/churchyard/openscad-devel/"&gt;OpenSCAD&lt;/a&gt;
  for modeling (going from idea to a&amp;nbsp;3D model on the screen)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://copr.fedoraproject.org/coprs/churchyard/slic3r-latest/"&gt;Slic3r&lt;/a&gt;
  for G-code generation (going from 3D to instructions for the printer)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kliment/Printrun"&gt;Pronterface&lt;/a&gt; for printer control&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Today I'll be talking about the second tool in that chain.
But first, what will I&amp;nbsp;print?&lt;/p&gt;
&lt;h2 id="adrawer-handle"&gt;A&amp;nbsp;Drawer Handle&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://encukou.cz/images/2015-10-25-slic3r/handle-old.jpg"&gt;&lt;img alt="The Problem" class="size-auto" src="https://encukou.cz/images/2015-10-25-slic3r/handle-old.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I&amp;nbsp;have some drawers whose handles are pretty flimsy, and as time goes by,
they're detaching.
Which is a&amp;nbsp;shame, because these big, red handles fit my room really well.
And I&amp;nbsp;can't replace them, because nobody makes them anymore.
(Well, maybe they do – I&amp;nbsp;didn't look for them &lt;em&gt;everywhere&lt;/em&gt; – but the DYI
alternative is still more fun!)&lt;/p&gt;
&lt;p&gt;So, I&amp;nbsp;decided print handles! I'm designing a&amp;nbsp;handle that can take a&amp;nbsp;screw and
a&amp;nbsp;nut, so it should hold well.
At this point I'm still learning about prinitng objects with exact
measurements, so that part isn't really done.
What I &lt;em&gt;have&lt;/em&gt; done – perhaps prematurely – is the aesthetical&amp;nbsp;design.&lt;/p&gt;
&lt;h2 id="the-first-layer"&gt;The First Layer&lt;/h2&gt;
&lt;p&gt;Professionally printed things have a&amp;nbsp;smooth finish, where you can't see
the individual strands and layers that make up the object.
I'm sure with enouth calibration and &lt;a href="http://airwolf3d.com/2013/11/26/7-steps-shiny-finish-on-abs-parts-acetone/"&gt;finishing work&lt;/a&gt;
I&amp;nbsp;can achieve that with my printer as well, but for now, everyone can see my
objects come from an extruding printer&amp;nbsp;head.&lt;/p&gt;
&lt;p&gt;And I&amp;nbsp;like that! Not only me, several people I&amp;nbsp;showed the objects to liked
the pattern on the bottom, which is smooth and flat and smooth from lying
on the print bed, but still shows the path the extruder took.
As any good artist, I&amp;nbsp;get to take advantage of the imperfections
in my medium!&lt;/p&gt;
&lt;p&gt;The tool that generates the patterns for me, Slic3r, has
&lt;a href="http://manual.slic3r.org/expert-mode/infill"&gt;several to choose from&lt;/a&gt;.
Some are only available for the inside of objects, because they can't cover
100% of the space, but there's&amp;nbsp;still a&amp;nbsp;good selection: the boring old
Rectilinear, the outline-following Cocentric, the fractal Hilbert Curve,
the Archimedean Chords spiral, and the angular Octagram&amp;nbsp;Spiral.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://encukou.cz/images/2015-10-25-slic3r/rectilinear.png"&gt;&lt;img alt="Plain Old Rectilinear" class="size-auto" src="https://encukou.cz/images/2015-10-25-slic3r/rectilinear.png" /&gt;&lt;/a&gt;
&lt;a href="https://encukou.cz/images/2015-10-25-slic3r/cocentric.png"&gt;&lt;img alt="Cocentric pattern" class="size-auto" src="https://encukou.cz/images/2015-10-25-slic3r/cocentric.png" /&gt;&lt;/a&gt;
&lt;a href="https://encukou.cz/images/2015-10-25-slic3r/hilbert.png"&gt;&lt;img alt="Hilbert Curve" class="size-auto" src="https://encukou.cz/images/2015-10-25-slic3r/hilbert.png" /&gt;&lt;/a&gt;
&lt;a href="https://encukou.cz/images/2015-10-25-slic3r/archimedean.png"&gt;&lt;img alt="Archimedean Chords" class="size-auto" src="https://encukou.cz/images/2015-10-25-slic3r/archimedean.png" /&gt;&lt;/a&gt;
&lt;a href="https://encukou.cz/images/2015-10-25-slic3r/octagram-spiral.png"&gt;&lt;img alt="Octagram Spiral" class="size-auto" src="https://encukou.cz/images/2015-10-25-slic3r/octagram-spiral.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;They're mostly meant to be functional, but some are quite aesthetically
pleasing than others.
Being the geek that I&amp;nbsp;am, I&amp;nbsp;prefer the Archimedean Chords and
Hilbert Curve.
&lt;em&gt;(Octagram Spiral comes in at a&amp;nbsp;close third place, but if I&amp;nbsp;printed that I
would be worried about a&amp;nbsp;magic portal to Discworld suddenly opening. (I&amp;nbsp;wonder,
would that be a&amp;nbsp;bad thing? Anyway, where was I? Ah,
&lt;a href="https://en.wikipedia.org/wiki/Archimedes"&gt;Archimedes&lt;/a&gt; and
&lt;a href="https://en.wikipedia.org/wiki/David_Hilbert"&gt;Hilbert&lt;/a&gt;.))&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The trouble is, I&amp;nbsp;couldn't choose between the two.
Is there a&amp;nbsp;way to use both, I&amp;nbsp;wondered?&lt;/p&gt;
&lt;h2 id="modifier-objects"&gt;Modifier objects&lt;/h2&gt;
&lt;p&gt;Yes, there is!
At the workshop I&amp;nbsp;built my printer, the discussion wandered a&amp;nbsp;little too deep
into a&amp;nbsp;few obscure details that nobody really uses.
One of those is slic3r's&amp;nbsp;modifier meshes: a&amp;nbsp;way to change print settings
for a&amp;nbsp;specified part of the object.
There's&amp;nbsp;apparently only one documented use case for these on the Internet:
&lt;a href="http://slic3r.org/blog/modifier-meshes"&gt;strengthening the neck of an ukulele&lt;/a&gt;.
Let's&amp;nbsp;add another one!&lt;/p&gt;
&lt;p&gt;I&amp;nbsp;decided my new handles will be various regular polygons instead of
the original circles. I&amp;nbsp;decided to start with a&amp;nbsp;pentagon. To provide
some contrast to the geometric infill patterns, I&amp;nbsp;chose to include the
&lt;a href="https://en.wikipedia.org/wiki/Vinca_major"&gt;&lt;em&gt;Vinca major&lt;/em&gt;&lt;/a&gt;
&lt;a href="https://en.wikipedia.org/wiki/File:Apocynaceae_-_Vinca_major-1.JPG"&gt;flower&lt;/a&gt;
to the design.
Its five-fold rotational (but not reflectional) symmetry is quite&amp;nbsp;beautiful.&lt;/p&gt;
&lt;p&gt;I&amp;nbsp;traced a&amp;nbsp;petal in &lt;a href="https://inkscape.org"&gt;Inkcsape&lt;/a&gt;, and used
&lt;a href="http://www.thingiverse.com/thing:25036"&gt;a&amp;nbsp;plugin&lt;/a&gt; to generate a&amp;nbsp;very thin
3D model from it.
The thickness is about the same as the first layer of my printout.
Then, I&amp;nbsp;added the part as a&amp;nbsp;Modifier object in Slic3r, and set its infill
to Hilbert Curve. The rest of the object usess Archimedean&amp;nbsp;Chords.&lt;/p&gt;
&lt;p&gt;Et voilà! A&amp;nbsp;combined pattern&amp;nbsp;emerges.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://encukou.cz/images/2015-10-25-slic3r/combination.png"&gt;&lt;img alt="Sliced bottom layer" class="size-full" src="https://encukou.cz/images/2015-10-25-slic3r/combination.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Slic3r adds quite a&amp;nbsp;wide margin between the two areas, which works out well
for my use of two large patches of distinct textures.
If you want finer control, it might not be that&amp;nbsp;convenient.&lt;/p&gt;
&lt;h2 id="centering"&gt;Centering&lt;/h2&gt;
&lt;p&gt;Actually, there's&amp;nbsp;one more thing needed for a&amp;nbsp;nice result.
For patterns that have a&amp;nbsp;visible center (i.e. Octagram and the Archimedean Chords),
Slic3r seems to use the part's&amp;nbsp;bounding box to compute the&amp;nbsp;center.&lt;/p&gt;
&lt;p&gt;For the modifier object, this would be easy to fix: just add a&amp;nbsp;circle around
the flower, making it large enough to not intersect the handle&amp;nbsp;itself.&lt;/p&gt;
&lt;p&gt;For the actual handle, I&amp;nbsp;instead added little “specks” around the perimeter,
small enough to not be printed.
You can see them in the screnshot above as light grey dots off to the sides
of the pentagon.
This tricked Slic3r into putting the center where it should&amp;nbsp;be.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://encukou.cz/images/2015-10-25-slic3r/handle-new.jpg"&gt;&lt;img alt="The Solution" class="size-auto" src="https://encukou.cz/images/2015-10-25-slic3r/handle-new.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="to-be-continued"&gt;To Be Continued&lt;/h2&gt;
&lt;p&gt;Now that I&amp;nbsp;have the first layer ready, I'm off to making the screw &amp;amp; nut fit
well inside the handle.
And, of course, making similar designs for other polygons.
And printing other interesting things.
Maybe I'll blog about that as well!&lt;/p&gt;
&lt;p&gt;By the way, all the files for this project are &lt;a href="https://github.com/encukou/3d/tree/master/handle"&gt;on&amp;nbsp;Github&lt;/a&gt;.
Enjoy!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Oh, and if you want me to print anything: come visit me, bring some tea, and
we can chat while watching the printer make electronic noises and plastic
creations. (Otherwise, i&amp;nbsp;might add a&amp;nbsp;simple, small object to a&amp;nbsp;print job
if you send me a&amp;nbsp;fully prepared model, but you're probably better off ordering
a&amp;nbsp;print online.)&lt;/p&gt;</content><category term="misc"></category><category term="3d"></category></entry><entry><title>Types as namespaces</title><link href="https://encukou.cz/blog/2015/03/01/en-variable-types" rel="alternate"></link><published>2015-03-01T00:00:00+01:00</published><updated>2015-03-01T00:00:00+01:00</updated><author><name>Petr Viktorin</name></author><id>tag:encukou.cz,2015-03-01:/blog/2015/03/01/en-variable-types</id><summary type="html">&lt;p&gt;Musings inspired by Eevee's &lt;a href="http://eev.ee/blog/2015/02/28/sylph-the-programming-language-i-want/"&gt;post about Sylph&lt;/a&gt;.
Read that first.&lt;/p&gt;
&lt;p&gt;In Python's duck-typing system, it's enough if things quack.
They don't actually need to quack &lt;em&gt;like a duck&lt;/em&gt;.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Musings inspired by Eevee's &lt;a href="http://eev.ee/blog/2015/02/28/sylph-the-programming-language-i-want/"&gt;post about Sylph&lt;/a&gt;.
Read that first.&lt;/p&gt;
&lt;p&gt;In Python's&amp;nbsp;duck-typing system, it's&amp;nbsp;enough if things quack.
They don't actually need to quack &lt;em&gt;like a&amp;nbsp;duck&lt;/em&gt;.&lt;/p&gt;


&lt;hr /&gt;
&lt;p&gt;Whenever you program, you need to keep track of the types of things you're dealing with.
Some languages – the statically typed ones – require you to specify the type in front, and then they check it rigorously.
In Python, you need to keep track of this in your head.
It's&amp;nbsp;possible that you're writing code where a&amp;nbsp;variable could be either a&amp;nbsp;string or a&amp;nbsp;number:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;def add(a, b):
    return a + b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;... or you might want a&amp;nbsp;variable to changes type in the middle of a&amp;nbsp;function,
like in the example from &lt;a href="http://docs.python-guide.org/en/latest/writing/structure/#dynamic-typing"&gt;Hitchhiker's&amp;nbsp;guide to Python&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;items = &amp;#39;a b c d&amp;#39;  # This is a string...
items = items.split(&amp;#39; &amp;#39;)  # ...becoming a list
items = set(items)  # ...and then a set
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Those are smells: they should be &lt;em&gt;possible&lt;/em&gt; but not&amp;nbsp;&lt;em&gt;easy&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Variables (the &lt;em&gt;names&lt;/em&gt;, not just values) always have types, even if,
as in the “dynamic” languages, they're only implied – they only exist in the
programmer's&amp;nbsp;head, as assumptions on the value's&amp;nbsp;behavior.
If I&amp;nbsp;use a &lt;code&gt;startswith&lt;/code&gt; I&amp;nbsp;really want “a&amp;nbsp;method with the &lt;em&gt;semantics&lt;/em&gt; of &lt;code&gt;String:startswith&lt;/code&gt;”,
rather than “the method &lt;em&gt;named&lt;/em&gt;&amp;nbsp;startswith”.&lt;/p&gt;
&lt;h2 id="types-of-variables"&gt;Types of variables&lt;/h2&gt;
&lt;p&gt;I&amp;nbsp;have some syntax in mind. If I&amp;nbsp;rewrite one of the first examples in
Eevee's&amp;nbsp;post in it, I&amp;nbsp;can get something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;def foo(a: String, b: StringPattern, c: List):
    if a.startswith(b):
        c.append(a)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;By which I&amp;nbsp;want to say &lt;code&gt;b&lt;/code&gt; can be string, or a&amp;nbsp;tuple of strings,
or even a&amp;nbsp;regex for all I&amp;nbsp;care – as long as it can be matched against a&amp;nbsp;string.
Those are the semantics I&amp;nbsp;wrote the function for.
If you call it with different types then you're on your own – it might work,
and the language should allow it, but I&amp;nbsp;offer no guarantees about the behavior of my&amp;nbsp;function.&lt;/p&gt;
&lt;p&gt;Here the “startswith” is, quite explicitly, &lt;code&gt;String:startswith&lt;/code&gt;.
The call is not a&amp;nbsp;command to “quack”, but to “quack &lt;em&gt;like a&amp;nbsp;duck&lt;/em&gt;”.&lt;/p&gt;
&lt;p&gt;The difference from statically-typed languages is that I'm not requiring &lt;code&gt;a&lt;/code&gt; to be
a&amp;nbsp;string, or a&amp;nbsp;string subtype.
I&amp;nbsp;don't even care if &lt;code&gt;a&lt;/code&gt; implements the string interface.
I'm just saying that I&amp;nbsp;want to call &lt;code&gt;String:startswith&lt;/code&gt;.
The &lt;code&gt;String&lt;/code&gt; declaration does not restrict the value, it provides a&amp;nbsp;namespace for my operations on it.
And with the namespaced operations come some well-defined semantics: if you misimplement them,
it's&amp;nbsp;not my fault that my &lt;code&gt;foo&lt;/code&gt; function won't&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;Similarly, I&amp;nbsp;don't care if &lt;code&gt;c&lt;/code&gt; is actually a&amp;nbsp;list. I'm just saying I&amp;nbsp;want the
&lt;code&gt;MutableSequence:append&lt;/code&gt; method (for which &lt;code&gt;List:append&lt;/code&gt; is an alias).
After the &lt;code&gt;append&lt;/code&gt; call, &lt;code&gt;c[-1]&lt;/code&gt; should be whatever I&amp;nbsp;just put there.
But that's&amp;nbsp;your (the caller's) problem. If &lt;code&gt;c&lt;/code&gt; is not &lt;code&gt;List&lt;/code&gt; enough,
your code might break with the next version of my&amp;nbsp;library.&lt;/p&gt;
&lt;p&gt;Of course, usually &lt;code&gt;a&lt;/code&gt; will be an “actual string”, and the compiler can
optimize for that case.&lt;/p&gt;
&lt;p&gt;I'll put a&amp;nbsp;random snippet with syntax ideas here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;from somewhere import Snake

def print_length(x: List):
    print(x.length)

    if x has Snake:length:
        print(&amp;quot;Scary! I got a {}m long snake as argument!&amp;quot;(x.Snake:length))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="type-declarations"&gt;Type declarations&lt;/h2&gt;
&lt;p&gt;For variables, the type can be specified declaration.
Python has no variable declarations, which I&amp;nbsp;don't think is healthy, because the
resulting scoping rules are not intuitive. They happen to work OK for 99%
of the cases, but when you get hit by the 1%, you don't even know where to look
(unless you remember the warning from your tutorial).
Javascript's&amp;nbsp;explicit &lt;code&gt;var&lt;/code&gt; keyword is a&amp;nbsp;good thing, for much the same reasons as Python's
explicit &lt;code&gt;self&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In my syntax, variable declarations can specify the type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;str: String = &amp;quot;abcd&amp;quot;

list: List = [1, 2, 3]

for i:int in list:
    print(i * i)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But, since most (or ideally all) expressions have a&amp;nbsp;well-defined types, a&amp;nbsp;shorthand comes to mind:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;str := &amp;quot;abcd&amp;quot;
list := [&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="operator-namespaces"&gt;Operator namespaces&lt;/h2&gt;
&lt;p&gt;This would work:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;def concat(a: List, b: List):
    return a + b

def elementwise-add(a: Array, b: Array):
    return a + b

a := [1, 2, 3]
b := [4, 5, 6]

assert concat(a, b) == [1, 2, 3, 4, 5, 6]
assert elementwise-add(a, b) == [5, 7, 9]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;because while &lt;code&gt;Sequence:\+&lt;/code&gt; and &lt;code&gt;Array:\+&lt;/code&gt; are two different things,
lists can support &lt;em&gt;both&lt;/em&gt;.
(Here &lt;code&gt;List:\+&lt;/code&gt; is an alias for &lt;code&gt;Sequence:\+&lt;/code&gt; – a&amp;nbsp;List is primarily
a&amp;nbsp;Sequence.)&lt;/p&gt;
&lt;p&gt;(Extending this to custom operators with custom priority is left as an exercise...)&lt;/p&gt;
&lt;h2 id="definitions-and-implementations"&gt;Definitions and Implementations&lt;/h2&gt;
&lt;p&gt;Let's&amp;nbsp;make a&amp;nbsp;Tree interface.
I'll use &lt;a href="https://www.python.org/dev/peps/pep-0484/"&gt;PEP 484&lt;/a&gt;-ish syntax for generics:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;T := TypePlaceholder()

interface Tree:
    walk(self: T) -&amp;gt; Iterator[T]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This says that the type of &lt;code&gt;x.Tree:walk().next()&lt;/code&gt; will be the same as the
type of &lt;code&gt;x&lt;/code&gt;.
(For any &lt;code&gt;x&lt;/code&gt;. Remember it's&amp;nbsp;defining the type of the &lt;em&gt;expression&lt;/em&gt;, not the value;
it's&amp;nbsp;defining the namespace that expression will use by default.)&lt;/p&gt;
&lt;p&gt;Then you can define BinaryTree like this.
&lt;code&gt;BinaryTree:walk&lt;/code&gt; becomes an implementation of&amp;nbsp;&lt;code&gt;Tree:walk&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;class BinaryTree(Tree):
    left: Tree
    right: Tree

    impl walk(self):
        if self.left:
            yield from self.left.walk()
        yield self
        if self.right:
            yield from self.left.walk()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note the kewyord is &lt;code&gt;impl&lt;/code&gt;, not &lt;code&gt;def&lt;/code&gt;: this ensures that if the &lt;code&gt;Tree&lt;/code&gt; interface
grows a&amp;nbsp;new method, existing methods of the same name won't magically become
its implementations.
(Though you will get lots of &lt;em&gt;warnings&lt;/em&gt; about the new method not being implemented
by classes that claim to implement &lt;code&gt;Tree&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;Next let's&amp;nbsp;have a&amp;nbsp;class for corporate employees.
An amployee is not a&amp;nbsp;tree, and there's&amp;nbsp;no &lt;code&gt;Employee:walk&lt;/code&gt; in our model,
but you can still use an employee as a&amp;nbsp;tree node:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;class Employee:
    boss: Employee
    underlings: List[Employee]

    impl Tree:walk(self):
        yield self
        for underling in self.underlings:
            yield from underling.walk()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And you might want to attach a &lt;code&gt;Tree:walk&lt;/code&gt; to something from some library you
can't easily change, like the stdlib.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;impl Path.Tree:walk(self):
    yield self
    if self.isdir:
        for child:Tree in self.listdir:
            yield from child
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The language should probably limit who can do this and where,&amp;nbsp;though.&lt;/p&gt;
&lt;p&gt;To step away from Tree for one paragraph:
Since every class derives from &lt;code&gt;Object&lt;/code&gt;, which has a &lt;code&gt;to_string&lt;/code&gt; method,
you can write &lt;code&gt;impl to_string&lt;/code&gt; in any class.
Or you can write &lt;code&gt;def to_string&lt;/code&gt;, which won't conflict with &lt;code&gt;Object:to_string&lt;/code&gt;
(though it will raise eyebrows and trip up your linter).
And you can later add &lt;code&gt;impl Object:to_string&lt;/code&gt;, which won't be aliased&amp;nbsp;to
&lt;code&gt;YourClass:to_string&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="interface-conflicts"&gt;Interface conflicts&lt;/h2&gt;
&lt;p&gt;Consider this class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;class FamilyMember:
    parents: List[FamilyMember]
    children: List[FamilyMember]

    impl Tree:walk(self):
        # this is not be correct but w/e
        yield self
        for child:Tree in self.children:
            yield from child
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, if you inherit from both &lt;code&gt;Employee&lt;/code&gt; and &lt;code&gt;FamilyMember&lt;/code&gt;, you're in trouble.
The resulting &lt;code&gt;Tree:walk&lt;/code&gt; should fail loudly, unless you explicitly override&amp;nbsp;it.&lt;/p&gt;
&lt;h2 id="bags-of-attributes"&gt;Bags of attributes&lt;/h2&gt;
&lt;p&gt;“But Petr“, I&amp;nbsp;hear you saying, “I&amp;nbsp;want my &lt;code&gt;getattr(self, 'visit_' + node.type)&lt;/code&gt;”!
Eh, really? I&amp;nbsp;reply. That looks quite ugly.
I&amp;nbsp;jut explained that I&amp;nbsp;think attribute names should &lt;em&gt;not&lt;/em&gt; be just names, didn't I?
If you want a&amp;nbsp;collection of things keyed by strings, use a&amp;nbsp;mapping.
You don't even want the keys to be strings here – you want Node&amp;nbsp;subclasses.&lt;/p&gt;
&lt;p&gt;That said, you could write &lt;code&gt;getattr(self, Attribute(Visit, node.type))&lt;/code&gt;,
and implement &lt;code&gt;Visit:leaf&lt;/code&gt;, where &lt;code&gt;Visit&lt;/code&gt; is an empty(!)&amp;nbsp;interface.&lt;/p&gt;
&lt;h2 id="thatsit-for-now"&gt;That's&amp;nbsp;it for now&lt;/h2&gt;
&lt;p&gt;I&amp;nbsp;could rant on, about, say, registration conflicts or efficient vtable
references, but let's&amp;nbsp;end it here, throw it at the wall and see if it&amp;nbsp;sticks.&lt;/p&gt;
&lt;p&gt;(I&amp;nbsp;welcome comments, by the way – if you have any, send them by e-mail or pull request)&lt;/p&gt;</content><category term="misc"></category><category term="language design"></category></entry><entry><title>Měnění objektů</title><link href="https://encukou.cz/blog/2014/01/05/cs-meneni-objektu" rel="alternate"></link><published>2014-01-05T00:00:00+01:00</published><updated>2014-01-05T00:00:00+01:00</updated><author><name>Petr Viktorin</name></author><id>tag:encukou.cz,2014-01-05:/blog/2014/01/05/cs-meneni-objektu</id><summary type="html">&lt;p&gt;Už víme, &lt;a href="https://encukou.cz/blog/2014/01/05/cs-promenne-jsou-jmena"&gt;jak v Pythonu fungují proměnné&lt;/a&gt;.
(Pokud ne, doporučuju to napřed zjistit,
už jen pro seznámení s mými uměleckými diagramy.)
Teď se pojďme podívat na to, jak se chovají jejich hodnoty – tedy objekty.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Už víme, &lt;a href="https://encukou.cz/blog/2014/01/05/cs-promenne-jsou-jmena"&gt;jak v&amp;nbsp;Pythonu fungují proměnné&lt;/a&gt;.
(Pokud ne, doporučuju to napřed zjistit,
už jen pro seznámení s&amp;nbsp;mými uměleckými diagramy.)
Teď se pojďme podívat na to, jak se chovají jejich hodnoty – tedy&amp;nbsp;objekty.&lt;/p&gt;


&lt;p&gt;Toto je druhý ze série článků o&amp;nbsp;tom, jak funguje Python.
Pokud jsi se dostala přímo sem, koukni na
&lt;a href="https://encukou.cz/blog/2014/01/05/cs-rozcestnik-python"&gt;Rozcestník&lt;/a&gt;
a&amp;nbsp;trochu se zorientuj.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Řetězce, stejně jako čísla nebo n-tice, jsou neměnitelné &lt;em&gt;(immutable)&lt;/em&gt;.
To znamená, že se nedá žádným způsobem změnit jejich hodnota.
Chceme-li řetězec „změnit“, musíme vytvořit úplně nový objekt
s&amp;nbsp;novou hodnotou.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;retezec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;retezec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;retezec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;retezec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;retezec&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;D&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;retezec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;retezec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Tyhle příkazy vytvoří několik „sirotků“,
než do proměnné dostanou správnou hodnotu:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;┌─────────┐     ╔═══════╗
│ retezec ├─┐ ×→║ &amp;#39;abc&amp;#39; ║
└─────────┘ │   ╚═══════╝
            │   ╔═══════╗
            │ ×→║ &amp;#39;ABC&amp;#39; ║    ╔═════╗
            │   ╚═══════╝    ║ &amp;#39;D&amp;#39; ║
            │   ╔════════╗   ╚═════╝
            │ ×→║ &amp;#39;ABCD&amp;#39; ║
            │   ╚════════╝
            │   ╔═══════╗
            └──→║ &amp;#39;BCD&amp;#39; ║
                ╚═══════╝
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Existují ale i&amp;nbsp;objekty, které měnit lze. Klasický příklad jsou&amp;nbsp;seznamy.&lt;/p&gt;
&lt;p&gt;Jak funguje takový seznam?&lt;/p&gt;
&lt;p&gt;Když napíšeme&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;jmeno&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hynek&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;jmena&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;štěpán&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;vilém&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;dostaneme následující situaci:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;┌───────┐          ╔═════════╗
│ jmeno ├─────────→║ &amp;#39;hynek&amp;#39; ║
└───────┘          ╚═════════╝
┌───────┐    ╔═════╤═════╗
│ jmena ├───→║ [0] │ [1] ║
└───────┘    ╚══╪══╧══╪══╝
                │     │         ╔═════════╗
                │     └────────→║ &amp;#39;vilém&amp;#39; ║
                │ ╔══════════╗  ╚═════════╝
                └→║ &amp;#39;štěpán&amp;#39; ║ 
                  ╚══════════╝
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Položky seznamu se chovají jako proměnné.
Stejně jako hodnota výrazu &lt;code&gt;jmeno&lt;/code&gt; je teď &lt;code&gt;'hynek&lt;/code&gt;',
výraz &lt;code&gt;jmena[0]&lt;/code&gt; má hodnotu &lt;code&gt;'štěpán'&lt;/code&gt;.
A&amp;nbsp;stejně tak jako můžeme přiřadit do proměnné &lt;code&gt;jmeno&lt;/code&gt;,
můžeme přiřadit i&amp;nbsp;do &lt;code&gt;jmena[0]&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;jmena&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jmeno&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;a&amp;nbsp;dostaneme stejný výsledek, jako by &lt;code&gt;jmena[0]&lt;/code&gt; byla normální proměnná:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;┌───────┐          ╔═════════╗
│ jmeno ├─────────→║ &amp;#39;hynek&amp;#39; ║
└───────┘       ┌─→╚═════════╝
┌───────┐    ╔══╪══╤═════╗
│ jmena ├───→║ [0] │ [1] ║
└───────┘    ╚═════╧══╪══╝
                      │         ╔═════════╗
                      └────────→║ &amp;#39;vilém&amp;#39; ║
                                ╚═════════╝
                    * poof *
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Protože je seznam objekt jako každý jiný,
může mít více jmen — může na něj ukazovat více proměnných.
Po příkazu&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;slova&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jmena&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;bude situace vypadat takhle:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;                   ╔═════════╗
                ┌─→║ &amp;#39;hynek&amp;#39; ║
                │  ╚═════════╝
┌───────┐    ╔══╪══╤═════╗
│ jmena ├───→║ [0] │ [1] ║
└───────┘ ┌─→╚═════╧══╪══╝
┌───────┐ │           │         ╔═════════╗
│ slova ├─┘           └────────→║ &amp;#39;vilém&amp;#39; ║
└───────┘                       ╚═════════╝
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Seznam teď můžeme měnit pomocí kteréhokoli z&amp;nbsp;těch dvou&amp;nbsp;jmen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jmena&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# → [&amp;#39;hynek&amp;#39;, &amp;#39;vilem&amp;#39;]&lt;/span&gt;
&lt;span class="n"&gt;slova&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jarmila&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# na proměnnou `jmena` vůbec nesaháme!&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jmena&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# → [&amp;#39;hynek&amp;#39;, &amp;#39;vilem&amp;#39;, &amp;#39;jarmila&amp;#39;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Když si uvědomíme, co se děje uvnitř,
nemůže nás toto chování ničím překvapit.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;                   ╔═════════╗
                ┌─→║ &amp;#39;hynek&amp;#39; ║
                │  ╚═════════╝
┌───────┐    ╔══╪══╤═════╤═════╗   ╔═══════════╗
│ jmena ├───→║ [0] │ [1] │ [2] ╫──→║ &amp;#39;jarmila&amp;#39; ║
└───────┘ ┌─→╚═════╧══╪══╧═════╝   ╚═══════════╝
┌───────┐ │           │         ╔═════════╗
│ slova ├─┘           └────────→║ &amp;#39;vilém&amp;#39; ║
└───────┘                       ╚═════════╝
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Toto chování je zdrojem častých chyb.
Musíme pořád mít na paměti, že pokud jakýkoli měnitelný objekt
(např. seznam, nebo slovník) poskytneme třeba nějaké funkci jako parametr,
ta funkce nám ho může pod rukama&amp;nbsp;změnit.&lt;/p&gt;
&lt;p&gt;Abychom zabránili chybám, je dobré co používat neměnitelné objekty
(řetězce, čísla, n-tice), a&amp;nbsp;psát kód tak,
aby objekty neměnil pokud přímo&amp;nbsp;nemusí.&lt;/p&gt;
&lt;p&gt;Ještě připomenu, že pokud máš n-tici,
nelze přiřadit přímo do jejích položek:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;ntice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;def&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ntice&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ghi&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# → TypeError: &amp;#39;tuple&amp;#39; object does not support item assignment&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ale dej si pozor na i&amp;nbsp;to,
že objekty které obsahuje se stále měnit dají:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;seznam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;ntice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seznam&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;seznam&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ntice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# → (&amp;#39;abc&amp;#39;, [1, 2, 3, 4])&lt;/span&gt;
&lt;span class="n"&gt;ntice&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seznam&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# → [1, 2, 3, 4, 5]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A&amp;nbsp;to je prozatím k&amp;nbsp;měnění objektů všechno.
Příště se můžeš těšit na důkladný rozbor&amp;nbsp;&lt;em&gt;přiřazování&lt;/em&gt;.&lt;/p&gt;</content><category term="Python"></category><category term="python"></category><category term="mutability"></category></entry><entry><title>Proměnné jsou jména</title><link href="https://encukou.cz/blog/2014/01/05/cs-promenne-jsou-jmena" rel="alternate"></link><published>2014-01-05T00:00:00+01:00</published><updated>2014-01-05T00:00:00+01:00</updated><author><name>Petr Viktorin</name></author><id>tag:encukou.cz,2014-01-05:/blog/2014/01/05/cs-promenne-jsou-jmena</id><summary type="html">&lt;p&gt;Jak v Pythonu fungují proměnné?
Už asi víš, že se přiřazují pomocí rovnítka,
a že se pak dají používat ve výrazech.
Pojďme se na ně podívat trochu podrobněji.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Jak v&amp;nbsp;Pythonu fungují proměnné?
Už asi víš, že se přiřazují pomocí rovnítka,
a&amp;nbsp;že se pak dají používat ve výrazech.
Pojďme se na ně podívat trochu&amp;nbsp;podrobněji.&lt;/p&gt;


&lt;p&gt;Toto je první ze série článků o&amp;nbsp;tom, jak funguje Python.
Pokud jsi se dostala přímo sem, koukni na
&lt;a href="https://encukou.cz/blog/2014/01/05/cs-rozcestnik-python"&gt;Rozcestník&lt;/a&gt;
a&amp;nbsp;trochu se zorientuj.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Na rozdíl od jazyků jako C, kde proměnná je vyhrazené místo v&amp;nbsp;paměti,
Proměnné v&amp;nbsp;Pythonu jsou &lt;em&gt;jména&lt;/em&gt;, nebo řekněme&amp;nbsp;&lt;em&gt;ukazatele&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Abych to vysvětlil, pojďme se krok po kroku podívat,
co přesně dělá tohle jednoduché přiřazení:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;jazyk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Nejdřív se vyhodnotí výraz za rovnítkem.
Výsledek vyhodnocení výrazu je vždycky nějaký &lt;em&gt;objekt&lt;/em&gt;;
v&amp;nbsp;našem případě řetězec 'python'.
Ukážeme si ho takhle:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;                ╔══════════╗
                ║ &amp;#39;python&amp;#39; ║
                ╚══════════╝
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Teď, když má hodnotu výrazu, podívá se Python na jméno před rovnítkem,
a&amp;nbsp;zařídí, aby na tu hodnotu&amp;nbsp;„ukazovalo“.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;┌───────┐       ╔══════════╗
│ jazyk ├──────→║ &amp;#39;python&amp;#39; ║
└───────┘       ╚══════════╝
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Voilà! Hodnota proměnné &lt;code&gt;jazyk&lt;/code&gt; je odteď&amp;nbsp;&lt;code&gt;'python'&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Pojďme si přiřadit další proměnnou:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;rec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;češ&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tina&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Opět se vyhodnotí výraz, vezmou se řetězce &lt;code&gt;'češ'&lt;/code&gt; a &lt;code&gt;'tina'&lt;/code&gt;, sečtou se,
a&amp;nbsp;na výslednou hodnotu začne ukazovat proměnná &lt;code&gt;rec&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;┌───────┐       ╔══════════╗
│ jazyk ├──────→║ &amp;#39;python&amp;#39; ║
└───────┘       ╚══════════╝
┌─────┐         ╔═══════════╗
│ rec ├────────→║ &amp;#39;čeština&amp;#39; ║
└─────┘         ╚═══════════╝
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Že to není zas tak složité?&lt;/p&gt;
&lt;p&gt;Teď zkusíme jednu proměnnou „přiřadit“ do druhé:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;jazyk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rec&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Opět se nejdřív vyhodnotí výraz za rovnítkem.
Výsledek bude objekt, který je v&amp;nbsp;proměnné &lt;code&gt;rec&lt;/code&gt;.
A&amp;nbsp;proměnná &lt;code&gt;jazyk&lt;/code&gt; začne jednoduše ukazovat na tento objekt:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;┌───────┐       ╔══════════╗
│ jazyk ├───┐ ×→║ &amp;#39;python&amp;#39; ║
└───────┘   │   ╚══════════╝
┌─────┐     └──→╔═══════════╗
│ rec ├────────→║ &amp;#39;čeština&amp;#39; ║
└─────┘         ╚═══════════╝
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Tady je důvod, proč říkám že proměnné v&amp;nbsp;Pythonu jsou &lt;em&gt;jména&lt;/em&gt;.
Jeden objekt může mít několik jmen, ale pořád je to ten samý&amp;nbsp;objekt.&lt;/p&gt;
&lt;p&gt;Řetězec &lt;code&gt;'python'&lt;/code&gt; teď žádné jméno nemá. Nedá se k&amp;nbsp;němu nijak
dostat&lt;sup id="fnref:interned-strings"&gt;&lt;a class="footnote-ref" href="#fn:interned-strings"&gt;1&lt;/a&gt;&lt;/sup&gt;, a&amp;nbsp;tudíž s&amp;nbsp;ním dál nemůžeme nijak pracovat.
Jediné co můžeme dělat je vytvořit nový objekt se stejnou hodnotou.
Takovéhle sirotky Python časem smaže, aby nezabíraly paměť počítače:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;┌───────┐
│ jazyk ├───┐      * poof *
└───────┘   │
┌─────┐     └──→╔═══════════╗
│ rec ├────────→║ &amp;#39;čeština&amp;#39; ║
└─────┘         ╚═══════════╝
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Teď, když víme jak fungují proměnné, se můžeme podívat na zoubek
jejich hodnotám, tedy objektům.
Další článek v&amp;nbsp;sérii nám poví
o &lt;a href="https://encukou.cz/blog/2014/01/05/cs-meneni-objektu"&gt;Měnění objektů&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id="zdroje-adalsi-materialy"&gt;Zdroje a&amp;nbsp;další materiály&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pythontutor.com/"&gt;Python Tutor&lt;/a&gt; umí názorně zobrazovat, jak proměnné fungují&lt;/li&gt;
&lt;li&gt;Ned Batchelder: &lt;a href="http://nedbatchelder.com/text/names.html"&gt;Facts and myths about Python names and values &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;David Gooder: &lt;a href="http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#python-has-names"&gt;Code Like a&amp;nbsp;Pythonista: Idiomatic Python — Python has Names&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:interned-strings"&gt;
&lt;p&gt;Tohle je zjednodušení; řetězce co se vyskytují přímo v kódu
jsou (v CPythonu) součástí modulu, takže se k nim nějak dostat dá,
a budou “žít” dál.
Podrobněji to plánuju rozeberat v článku &lt;em&gt;identity a hodnoty&lt;/em&gt;.&amp;#160;&lt;a class="footnote-backref" href="#fnref:interned-strings" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Python"></category><category term="python"></category><category term="proměnné"></category></entry><entry><title>Jak funguje Python</title><link href="https://encukou.cz/blog/2014/01/05/cs-rozcestnik-python" rel="alternate"></link><published>2014-01-05T00:00:00+01:00</published><updated>2014-01-05T00:00:00+01:00</updated><author><name>Petr Viktorin</name></author><id>tag:encukou.cz,2014-01-05:/blog/2014/01/05/cs-rozcestnik-python</id><summary type="html">&lt;p&gt;Znáte to.
Studentka vám položí otázku, a abyste na ni mohli pořádně odpovědět,
je potřeba trochu osvětlit základy.
Mně se to stalo s proměnnými v Pythonu.&lt;/p&gt;
&lt;p&gt;No a tak píšu.&lt;br/&gt;
Píšu na téma &lt;em&gt;Všechno o proměnných, hodnotách a jménech v Pythonu.&lt;/em&gt;&lt;br/&gt;
Píšu už druhý den.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Znáte to.
Studentka vám položí otázku, a&amp;nbsp;abyste na ni mohli pořádně odpovědět,
je potřeba trochu osvětlit základy.
Mně se to stalo s&amp;nbsp;proměnnými v&amp;nbsp;Pythonu.&lt;/p&gt;
&lt;p&gt;No a&amp;nbsp;tak píšu.&lt;br /&gt;
Píšu na téma &lt;em&gt;Všechno o&amp;nbsp;proměnných, hodnotách a&amp;nbsp;jménech v&amp;nbsp;Pythonu.&lt;/em&gt;&lt;br /&gt;
Píšu už druhý den.&lt;/p&gt;


&lt;p&gt;Přišel čas to trošku rozdělit.
Tady je moje osnova; až (a&amp;nbsp;jestli) to dopíšu, tak z&amp;nbsp;toho udělám&amp;nbsp;odkazy.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://encukou.cz/blog/2014/01/05/cs-promenne-jsou-jmena"&gt;Proměnné jsou jména&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://encukou.cz/blog/2014/01/05/cs-meneni-objektu"&gt;Měnění objektů&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Přiřazování&lt;/li&gt;
&lt;li&gt;Jmenné prostory&lt;/li&gt;
&lt;li&gt;Identity a&amp;nbsp;hodnoty &lt;!-- udělat odkaz v&amp;nbsp;poznámce pod čarou v "Proměnné jsou jména" --&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Články budou používat diakritiku v&amp;nbsp;řetězcích.
V&amp;nbsp;Pythonu 3&amp;nbsp;s&amp;nbsp;tím není žádný problém, ale používáš-li Python 2,
napiš na začátek každého pythoního souboru tyto řádky:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Encoding: UTF-8&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Jinak by všechny ukázky kódu měly fungovat v&amp;nbsp;Pythonu 2.7&amp;nbsp;i&amp;nbsp;3.3,
pokud není jinak uvedeno.&lt;/p&gt;
&lt;p&gt;Pokud uvidíš nějakou chybu, ozvi se mi na &lt;a href="mailto:encukou@gmail.com"&gt;mail&lt;/a&gt;,
nebo rovnou založ &lt;a href="https://github.com/encukou/blog/issues/new"&gt;issue&lt;/a&gt; či &lt;a href="https://github.com/encukou/blog"&gt;pull&amp;nbsp;request&lt;/a&gt;.&lt;/p&gt;</content><category term="Python"></category><category term="python"></category><category term="rozcestník"></category></entry><entry><title>Raspberry Pi and my Third Screen</title><link href="https://encukou.cz/blog/2013/05/04/en-raspberry-third-screen" rel="alternate"></link><published>2013-05-04T00:00:00+02:00</published><updated>2013-05-04T00:00:00+02:00</updated><author><name>Petr Viktorin</name></author><id>tag:encukou.cz,2013-05-04:/blog/2013/05/04/en-raspberry-third-screen</id><summary type="html">&lt;p&gt;Today, I finally figured out what was wrong with my Raspberry Pi.
It &lt;a href="http://file3.status.net/i/identica/encukou-20130120T115619-yw8xyls.jpeg"&gt;worked before&lt;/a&gt;,
connected to a TV, without ethernet, and with a power supply and keyboard
borrowed from my brother.
When I got my own accessories for it, though, I found the USB ports and network
were dead.&lt;/p&gt;
&lt;p&gt;Well, today I finally got around to some debugging, and found that the faulty
part was the USB cable between the box and the power supply (i.e. a phone
charger). Don't ask me how much I spent diagnosing that.
Luckily, I can easily get micro-USB cable, even on a Saturday.
(Okay, not nearly easily enough, but I did get one.)&lt;/p&gt;
&lt;p&gt;Hooray! A working computer! Let's try new things with it!
I've used &lt;code&gt;apt&lt;/code&gt; in Ubuntu for quite some time, so I thought Raspbian would be too
boring, and decided to go for Arch. So far it's been working nicely.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Today, I&amp;nbsp;finally figured out what was wrong with my Raspberry Pi.
It &lt;a href="http://file3.status.net/i/identica/encukou-20130120T115619-yw8xyls.jpeg"&gt;worked before&lt;/a&gt;,
connected to a&amp;nbsp;TV, without ethernet, and with a&amp;nbsp;power supply and keyboard
borrowed from my brother.
When I&amp;nbsp;got my own accessories for it, though, I&amp;nbsp;found the USB ports and network
were dead.&lt;/p&gt;
&lt;p&gt;Well, today I&amp;nbsp;finally got around to some debugging, and found that the faulty
part was the USB cable between the box and the power supply (i.e. a&amp;nbsp;phone
charger). Don't ask me how much I&amp;nbsp;spent diagnosing that.
Luckily, I&amp;nbsp;can easily get micro-USB cable, even on a&amp;nbsp;Saturday.
(Okay, not nearly easily enough, but I&amp;nbsp;did get one.)&lt;/p&gt;
&lt;p&gt;Hooray! A&amp;nbsp;working computer! Let's&amp;nbsp;try new things with it!
I've used &lt;code&gt;apt&lt;/code&gt; in Ubuntu for quite some time, so I&amp;nbsp;thought Raspbian would be too
boring, and decided to go for Arch. So far it's&amp;nbsp;been working&amp;nbsp;nicely.&lt;/p&gt;


&lt;h2 id="quassel"&gt;Quassel&lt;/h2&gt;
&lt;p&gt;My first reason for having a&amp;nbsp;Pi is a (hopefully) always-on IRC client.
I've been using &lt;a href="http://www.quassel-irc.org/"&gt;Quassel&lt;/a&gt; at work, where I&amp;nbsp;leave
a&amp;nbsp;Core running on a&amp;nbsp;virtual machine in the lab, and connect to that with the
graphical client. That way I&amp;nbsp;don't miss anything when my laptop is&amp;nbsp;off.&lt;/p&gt;
&lt;p&gt;It turns out Arch's&amp;nbsp;official repos only have the monolithic build of Quassel
(the core and client all in one), but a&amp;nbsp;nice person called joschi maintains a
&lt;a href="https://aur.archlinux.org/packages.php?ID=42085"&gt;Core-only&lt;/a&gt; package
in the AUR.
It worked for me with one modification – I&amp;nbsp;had to update the list of
supported arcitectures.
The &lt;code&gt;pkgbuild&lt;/code&gt;'s&amp;nbsp;error message included the name of my architecture ('armv6h'),
and the &lt;code&gt;PKGBUILD&lt;/code&gt; file left no doubt where that string should go.
All clear!&lt;/p&gt;
&lt;p&gt;The compile took quite some time (I&amp;nbsp;don't know exactly how much because I've
interrupted it a&amp;nbsp;few times to reboot while tinkering), but it paid off.
I'm on IRC again!&lt;/p&gt;
&lt;p&gt;Half an hour after I&amp;nbsp;reported my success to the Quassel AUR maintainer,
the arch was added to the package. Thanks,&amp;nbsp;joschi!&lt;/p&gt;
&lt;h2 id="my-third-monitor"&gt;My third monitor&lt;/h2&gt;
&lt;p&gt;Now for the other thing I&amp;nbsp;had in mind for the little box.
My laptop's&amp;nbsp;graphics card only supports two screens, and I&amp;nbsp;sometimes get the
feeling that two is too few.&lt;/p&gt;
&lt;p&gt;Looks like a&amp;nbsp;job for the Pi! I&amp;nbsp;have a&amp;nbsp;monitor conected to it, now I&amp;nbsp;just need
to wire it up to my computer.
Well, actually, before I&amp;nbsp;do that, I&amp;nbsp;see the default virtual terminal font
is rather large.
A &lt;code&gt;sudo pacman -S&amp;amp;nbsp;terminus-font&lt;/code&gt; and a &lt;code&gt;setfont ter-112n&lt;/code&gt; in an rc file
will make many more letters fit on the&amp;nbsp;screen.&lt;/p&gt;
&lt;p&gt;Now, the first step to connect the two machines was of course to SSH to the Pi,
so I&amp;nbsp;don't have to plug the keyboard back and forth.
And also to get the middle-clicky pasting goodness of an X terminal emulator.
(Goodness, did I&amp;nbsp;miss that!)&lt;/p&gt;
&lt;p&gt;And after that... hm. Let's&amp;nbsp;see what I&amp;nbsp;want to do,&amp;nbsp;exactly.&lt;/p&gt;
&lt;p&gt;I&amp;nbsp;need to run commands on the main machine, control them from the main machine,
but have them display on the little box. Sounds easy,&amp;nbsp;right?&lt;/p&gt;
&lt;p&gt;Turns out, it's&amp;nbsp;not that easy. At least for me –
I&amp;nbsp;sure hope there's&amp;nbsp;an easier solution than what I&amp;nbsp;came up&amp;nbsp;with.&lt;/p&gt;
&lt;p&gt;Since I&amp;nbsp;need to display the console on the Pi, I&amp;nbsp;started up a &lt;code&gt;tmux&lt;/code&gt; session
there.
I&amp;nbsp;can connect to it from my main box, but I'd like to have a “write-only”
connection: I&amp;nbsp;just want to send the keystrokes over, I&amp;nbsp;don't need to see the
third monitor's&amp;nbsp;contents on the main monitor – it's&amp;nbsp;on the other monitor!
I&amp;nbsp;could make the console window really small, but &lt;code&gt;tmux&lt;/code&gt; insists on making
the logical terminal just big enough for the smallest client connected to it.
I&amp;nbsp;briefly tried to find a&amp;nbsp;way to use an infinitesimally small font in
a&amp;nbsp;terminal emulator, but to no&amp;nbsp;avail.&lt;/p&gt;
&lt;p&gt;Luckily, thanks to research for &lt;a href="https://ep2013.europython.eu/conference/talks/terminals-command-lines-and-text-interfaces"&gt;my talk for this summer's&amp;nbsp;EuroPython&lt;/a&gt;,
I&amp;nbsp;know that terminal size is just two properties I&amp;nbsp;can set rather easily.
&lt;code&gt;stty cols 256; stty rows 256;&lt;/code&gt; and voilà, &lt;code&gt;tmux&lt;/code&gt; thinks it has a&amp;nbsp;window
that's&amp;nbsp;larger than my new monitor.
The only drawback is that whenever the window is resized, it picks up the new
size.
My research notes tell me this is handled by SIGWINCH, a&amp;nbsp;SIGnal that gets
sent whenever the WINdow size CHanges.
Luckily, there's&amp;nbsp;a &lt;a href="http://stackoverflow.com/a/4515549/99057"&gt;signal-blocking program&lt;/a&gt;
on StackOverflow, on which I&amp;nbsp;do a&amp;nbsp;quick &lt;code&gt;s/SIGINT/SIGWINCH/&lt;/code&gt; and compile.
I&amp;nbsp;hack up a&amp;nbsp;command to run SSH with the &lt;code&gt;stty&lt;/code&gt;s&amp;nbsp;and a&amp;nbsp;signal-blocked &lt;code&gt;tmux&lt;/code&gt;,
all in a&amp;nbsp;uniquely titled &lt;code&gt;xterm&lt;/code&gt;, and then use KDE's&amp;nbsp;nifty Window Settings
to make the &lt;code&gt;xterm&lt;/code&gt; window very tiny, borderless, always-on-top, on all
desktops, and in the upper left corner of the&amp;nbsp;screen.&lt;/p&gt;
&lt;p&gt;Glorious.&lt;/p&gt;
&lt;p&gt;I&amp;nbsp;think I'll name it &lt;code&gt;pi-remote&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;(Also, thank goodness for xterm's&amp;nbsp;simplicity: unlike modern programs that
try very very hard to never let users shoot themselves in the foot, xterm can
be resized small enough to be useless.
Well, useless for anything except what I'm trying to do here.)&lt;/p&gt;
&lt;h2 id="acircle-of-ssh"&gt;A&amp;nbsp;circle of SSH&lt;/h2&gt;
&lt;p&gt;Now that I&amp;nbsp;have a&amp;nbsp;way to control my second monitor, there's&amp;nbsp;one more goal:
running stuff on the main box.
Do do that, I&amp;nbsp;need to SSH back to it. Close the loop, so to&amp;nbsp;say.&lt;/p&gt;
&lt;p&gt;I'd like to go passwordless, and I'd rather not leave a&amp;nbsp;private key
that grants access to my main box lying around on the Pi.
I&amp;nbsp;think it's&amp;nbsp;time for some SSH agent forwarding.
It turns out Github has a &lt;a href="https://help.github.com/articles/using-ssh-agent-forwarding"&gt;nice article&lt;/a&gt;
on how to set that up – put some lines in &lt;code&gt;~/.ssh/config&lt;/code&gt;, uncomment one in
&lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;, restart sshd – not straightforward but easy&amp;nbsp;enough.&lt;/p&gt;
&lt;p&gt;Oh, and I&amp;nbsp;need to trust the key.
I&amp;nbsp;think this is the first time I've put my own key for a&amp;nbsp;machine in that
machine's &lt;code&gt;authorized_keys&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The part that I&amp;nbsp;didn't find an elegant solution for is passing the agent
forwarding info through tmux.
This stuff is passed around in environment variables, but the tmux session is
already running, with its own environment.
There's&amp;nbsp;probably an amazingly obvious way to do this, but after a&amp;nbsp;while of
searching I&amp;nbsp;decided for a&amp;nbsp;brute-force approach: before joining the session I
save the SSH-related env:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;env &lt;span class="p"&gt;|&lt;/span&gt; grep ^SSH  &amp;gt; ~/.ssh/third_monitor_callback_env
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and before SSH-ing back, I&amp;nbsp;restore&amp;nbsp;it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; line&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nb"&gt;declare&lt;/span&gt; -x &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$line&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt; &amp;lt; ~/.ssh/third_monitor_callback_env
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Works for me.&lt;/p&gt;
&lt;p&gt;It doesn't call back automatically.
The main machine is a&amp;nbsp;laptop, so it may not always be there,
and the pi should be usable without&amp;nbsp;it.&lt;/p&gt;
&lt;h2 id="the-red-freehand-arrow"&gt;The red freehand arrow&lt;/h2&gt;
&lt;p&gt;In the end, I&amp;nbsp;have a&amp;nbsp;Raspberry-Pi-controlled third monitor, in retro text mode.
I'll use it mainly for display (logs, stdout of GUI or web things, etc.),
but if I&amp;nbsp;need control, I&amp;nbsp;just click the top-left corner on my mouse-enabled
main screen and type away.
A&amp;nbsp;popular generalization of &lt;a href="http://en.wikipedia.org/wiki/Fitts%27s_law"&gt;Fitts' law&lt;/a&gt;
says this is very convenient, and I'm sure not arguing with&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://encukou.cz/images/2013-05-04-screenshot.png"&gt;&lt;img alt="Screenshot of my screen with a&amp;nbsp;red freehand arrow pointing at the pi-remote" class="size-full" src="https://encukou.cz/images/2013-05-04-screenshot.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here's&amp;nbsp;a&amp;nbsp;review of my files, for future reference:&lt;/p&gt;
&lt;p&gt;At the main machine, named &lt;code&gt;tapio&lt;/code&gt;, there's:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;~/bin/pi-remote:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;xterm -T &lt;span class="s1"&gt;&amp;#39;rpi remote!&amp;#39;&lt;/span&gt; +sb call-to-pi &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;~/bin/call-to-pi:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh -t eckpi &lt;span class="s1"&gt;&amp;#39;env | grep ^SSH  &amp;gt; ~/.ssh/third_monitor_callback_env; stty cols 256; stty rows 256; ~/bin/nowinch tmux attach-session -t third-monitor&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;~/.kde/share/config/kwinrulesrc (partial):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[1]
Description=Window settings for xterm
above=true
aboverule=3
clientmachine=tapio
clientmachinematch=0
desktop=-1
desktoprule=3
fsplevel[$d]
fsplevelrule[$d]
noborder=true
noborderrule=3
position=0,0
positionrule=2
size=26,20
sizerule=3
title=rpi remote!
titlematch=1
types=1
wmclass=xterm
wmclasscomplete=false
wmclassmatch=1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And at the Pi side, there's &lt;code&gt;~/bin/nowinch&lt;/code&gt; modified from the signal blocker
from &lt;a href="http://stackoverflow.com/a/4515549/99057"&gt;StackOverflow&lt;/a&gt;,
and &lt;code&gt;~/bin/tapio&lt;/code&gt; to SSH back home:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; line&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="nb"&gt;declare&lt;/span&gt; -x &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$line&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt; &amp;lt; ~/.ssh/third_monitor_callback_env
ssh tapio
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And, of course, an always-on &lt;code&gt;tmux&lt;/code&gt; session.
I&amp;nbsp;sometimes press Ctrl-D by mistake and don't want to get disconnected,
so I&amp;nbsp;run the shell in a&amp;nbsp;loop:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;tmux new-session -s third-monitor &lt;span class="s1"&gt;&amp;#39;while true; bash; reset; done&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I&amp;nbsp;sure hope there is an easier way to do this.&amp;nbsp;Anyone?&lt;/p&gt;</content><category term="Computers"></category><category term="raspberry"></category><category term="shell"></category><category term="quassel"></category><category term="tmux"></category></entry><entry><title>Stavové prostory</title><link href="https://encukou.cz/blog/2013/03/03/cs-stavove-prostory" rel="alternate"></link><published>2013-03-03T00:00:00+01:00</published><updated>2013-03-03T00:00:00+01:00</updated><author><name>Petr Viktorin</name></author><id>tag:encukou.cz,2013-03-03:/blog/2013/03/03/cs-stavove-prostory</id><summary type="html">&lt;p&gt;&lt;a href="http://glutexo.livejournal.com/137926.html"&gt;Glutexo píše&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Narazil jsem na drsné a vytůněné Sudoku: Podobá se klasickému killer sudoku:
V začátku neznáme žádná čísla, pouze máme ohraničené spojité oblasti, u
kterých vždy víme součet čísel v nich, a také víme, že kromě řádků, sloupců
a čtverců se ani v těchto ohraničených oblastech číslice neopakují.
&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://glutexo.livejournal.com/137926.html"&gt;Glutexo píše&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Narazil jsem na drsné a&amp;nbsp;vytůněné Sudoku: Podobá se klasickému killer sudoku:
V&amp;nbsp;začátku neznáme žádná čísla, pouze máme ohraničené spojité oblasti, u
kterých vždy víme součet čísel v&amp;nbsp;nich, a&amp;nbsp;také víme, že kromě řádků, sloupců
a&amp;nbsp;čtverců se ani v&amp;nbsp;těchto ohraničených oblastech číslice neopakují.

Řešení takového sudoku však nejspíše není unikátní (nakrmil jsem jím řešítko,
které jsem si našel), ale výsledek nebyl takový, jaký jsem chtěl: Chtěl jsem
jiné možné řešení, ne libovolné. A&amp;nbsp;nejspíše právě proto je zadání obohaceno
ještě o&amp;nbsp;informace o&amp;nbsp;některých dvojicích sousedících políček, že na jedné
straně je číslo větší než to na&amp;nbsp;druhé.&lt;/p&gt;
&lt;p&gt;Zajímalo mě, zda na to lze jít metodou hrubé síly, tedy projít si všech 9^81
kombinací a&amp;nbsp;porovnat je proti zadání. Nešlo: Za deset minut běhu program
prokombinoval jen třikrát prvních osm pozic. Takže než by prošel všechny,
uplynula by přibližně věčnost. Takže na to budeme muset jít jinak.&amp;nbsp;Jak?&lt;/p&gt;
&lt;p&gt;Pár možností mě napadá: Např. zjistit si pro každou ohraničenou oblast
všechny možné kombinace čísel v&amp;nbsp;rozsahu 1-9, které dají při daném počtu polí
daný součet a&amp;nbsp;následně do oblastí dosazovat tato čísla ve všech možných
kombinacích. Pak už by stačilo jen pro každé vyplnění plochy jen zvalidovat,
zda platí základní pricipy sudoku a&amp;nbsp;zda platí ona pravidla o&amp;nbsp;tom, které ze
sousedních polí má obsahovat větší číslo. Ale nedostanu se tím opět do
astronomické množství kombinací a&amp;nbsp;tak času? Uvidíme, ale&amp;nbsp;jindy.&lt;/p&gt;
&lt;p&gt;Nebo máte někdo nějaký nápad, nebo dokonce víte a&amp;nbsp;jste ochotni mi řešení
představit a&amp;nbsp;vysvětlit? Rád se&amp;nbsp;přiučím.&lt;/p&gt;
&lt;p&gt;A&amp;nbsp;pokud by někoho zajímalo zadání, tak se jedná o&amp;nbsp;kešku Loki's&amp;nbsp;mystery
(GCZE5N).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Napsal jsem program, který to vyluští za &lt;s&gt;11&amp;nbsp;vteřin&lt;/s&gt;*, v&amp;nbsp;pomalém Pythonu bez
velkých optimalizací, jen s&amp;nbsp;rozumným algoritmem.
Zkusím tu docela detailně popsat jak na to. Třeba to nebude nudné.
Kdyby něco naopak nebylo k&amp;nbsp;pochopení, prosím čtenáře, aby se&amp;nbsp;ozval.&lt;/p&gt;
&lt;p&gt;* &lt;i&gt;Upřesnění: celý graf to projde za 3&amp;nbsp;minuty, 11&amp;nbsp;vteřin bylo jen štěstí.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;Na podobné úlohy platí různé techniky prohledávání stavového prostoru.
Zrovna tady si vystačíš s&amp;nbsp;relativně jednoduchými, takže se to bude&amp;nbsp;dobře
vysvětlovat.&lt;/p&gt;
&lt;p&gt;Než začneme se stavovým prostorem, musíme vědět co je to stav.
Pro sudoku si stav můžeme definovat jako 9x9&amp;nbsp;pole, kde v&amp;nbsp;každém políčku
budou číslice, které tam teoreticky můžou nakonec vyjít.
V&amp;nbsp;počátečním stavu budou všechna políčka obsahovat všech 9&amp;nbsp;možných čislic:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;╔═══════╤═══════╤═══════╦═══════╤═══════╤═══════╦═══════╤═══════╤═══════╗
║ 1 2 3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║
║ 4 5 6 │ 4 5 6 │ 4 5 6 ║ 4 5 6 │ 4 5 6 &amp;gt; 4 5 6 ║ 4 5 6 │ 4 5 6 │ 4 5 6 ║ 1
║ 7 8 9 │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║
╟── ∨ ──┼───────┼── ∧ ──╫───────┼───────┼── ∨ ──╫───────┼───────┼───────╢
║ 1 2 3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║
║ 4 5 6 │ 4 5 6 │ 4 5 6 ║ 4 5 6 │ 4 5 6 │ 4 5 6 ║ 4 5 6 │ 4 5 6 │ 4 5 6 ║ 2
║ 7 8 9 │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║
╟── ∧ ──┼───────┼───────╫───────┼───────┼───────╫───────┼───────┼───────╢
║ 1 2 3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║
║ 4 5 6 &amp;lt; 4 5 6 &amp;lt; 4 5 6 ║ 4 5 6 │ 4 5 6 │ 4 5 6 &amp;lt; 4 5 6 │ 4 5 6 &amp;gt; 4 5 6 ║ 3
║ 7 8 9 │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║
╠═══════╪═══════╪═══════╬═══════╪═══════╪══ ∨ ══╬═══════╪═══════╪═══════╣
║ 1 2 3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║
║ 4 5 6 &amp;lt; 4 5 6 │ 4 5 6 &amp;lt; 4 5 6 │ 4 5 6 │ 4 5 6 &amp;gt; 4 5 6 │ 4 5 6 &amp;gt; 4 5 6 ║ 4
║ 7 8 9 │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║
╟── ∨ ──┼───────┼───────╫───────┼───────┼───────╫───────┼───────┼───────╢
║ 1 2 3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║
║ 4 5 6 &amp;gt; 4 5 6 │ 4 5 6 ║ 4 5 6 │ 4 5 6 │ 4 5 6 ║ 4 5 6 │ 4 5 6 │ 4 5 6 ║ 5
║ 7 8 9 │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║
╟───────┼───────┼───────╫───────┼───────┼── ∨ ──╫───────┼───────┼───────╢
║ 1 2 3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║
║ 4 5 6 &amp;lt; 4 5 6 │ 4 5 6 ║ 4 5 6 &amp;gt; 4 5 6 &amp;lt; 4 5 6 ║ 4 5 6 │ 4 5 6 │ 4 5 6 ║ 6
║ 7 8 9 │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║
╠═══════╪═══════╪═══════╬═══════╪═══════╪══ ∧ ══╬══ ∧ ══╪══ ∨ ══╪══ ∧ ══╣
║ 1 2 3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║
║ 4 5 6 │ 4 5 6 │ 4 5 6 ║ 4 5 6 &amp;lt; 4 5 6 │ 4 5 6 ║ 4 5 6 │ 4 5 6 │ 4 5 6 ║ 7
║ 7 8 9 │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║
╟───────┼───────┼───────╫───────┼───────┼───────╫───────┼── ∧ ──┼───────╢
║ 1 2 3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║
║ 4 5 6 &amp;gt; 4 5 6 │ 4 5 6 &amp;lt; 4 5 6 │ 4 5 6 │ 4 5 6 &amp;gt; 4 5 6 │ 4 5 6 │ 4 5 6 ║ 8
║ 7 8 9 │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║
╟── ∧ ──┼── ∧ ──┼───────╫───────┼───────┼── ∧ ──╫───────┼───────┼── ∧ ──╢
║ 1 2 3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║
║ 4 5 6 │ 4 5 6 │ 4 5 6 ║ 4 5 6 │ 4 5 6 │ 4 5 6 ║ 4 5 6 │ 4 5 6 │ 4 5 6 ║ 9
║ 7 8 9 │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║
╚═══════╧═══════╧═══════╩═══════╧═══════╧═══════╩═══════╧═══════╧═══════╝
    A       B       C       D       E       F       G       H       I
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;No a&amp;nbsp;abychom se dostali dál, budeme z&amp;nbsp;tohohle stavu některá čísla odebírat.
Třeba, pro začátek, hrubou silou: vygenerujeme devět stavů, které jsou stejné
jako tenhle původní, jen v&amp;nbsp;políčku A1&amp;nbsp;mají každý vybranou jednu číslici.
Třetí z&amp;nbsp;nich by vypadal takhle:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;╔═══════╤═══════╤═══════╦═══════╤═══════╤═══════╦═══════╤═══════╤═══════╗
║     3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║
║       │ 4 5 6 │ 4 5 6 ║ 4 5 6 │ 4 5 6 &amp;gt; 4 5 6 ║ 4 5 6 │ 4 5 6 │ 4 5 6 ║ 1
║       │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║
╟── ∨ ──┼───────┼── ∧ ──╫───────┼───────┼── ∨ ──╫───────┼───────┼───────╢
║ 1 2 3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║
║ 4 5 6 │ 4 5 6 │ 4 5 6 ║ 4 5 6 │ 4 5 6 │ 4 5 6 ║ 4 5 6 │ 4 5 6 │ 4 5 6 ║ 2
║ 7 8 9 │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║
╟── ∧ ──┼───────┼───────╫───────┼───────┼───────╫───────┼───────┼───────╢
║ 1 2 3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║
║ 4 5 6 &amp;lt; 4 5 6 &amp;lt; 4 5 6 ║ 4 5 6 │ 4 5 6 │ 4 5 6 &amp;lt; 4 5 6 │ 4 5 6 &amp;gt; 4 5 6 ║ 3
║ 7 8 9 │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║
╠═══════╪═══════╪═══════╬═══════╪═══════╪══ ∨ ══╬═══════╪═══════╪═══════╣
║ 1 2 3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║
║ 4 5 6 &amp;lt; 4 5 6 │ 4 5 6 &amp;lt; 4 5 6 │ 4 5 6 │ 4 5 6 &amp;gt; 4 5 6 │ 4 5 6 &amp;gt; 4 5 6 ║ 4
║ 7 8 9 │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║
╟── ∨ ──┼───────┼───────╫───────┼───────┼───────╫───────┼───────┼───────╢
║ 1 2 3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║
║ 4 5 6 &amp;gt; 4 5 6 │ 4 5 6 ║ 4 5 6 │ 4 5 6 │ 4 5 6 ║ 4 5 6 │ 4 5 6 │ 4 5 6 ║ 5
║ 7 8 9 │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║
╟───────┼───────┼───────╫───────┼───────┼── ∨ ──╫───────┼───────┼───────╢
║ 1 2 3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║
║ 4 5 6 &amp;lt; 4 5 6 │ 4 5 6 ║ 4 5 6 &amp;gt; 4 5 6 &amp;lt; 4 5 6 ║ 4 5 6 │ 4 5 6 │ 4 5 6 ║ 6
║ 7 8 9 │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║
╠═══════╪═══════╪═══════╬═══════╪═══════╪══ ∧ ══╬══ ∧ ══╪══ ∨ ══╪══ ∧ ══╣
║ 1 2 3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║
║ 4 5 6 │ 4 5 6 │ 4 5 6 ║ 4 5 6 &amp;lt; 4 5 6 │ 4 5 6 ║ 4 5 6 │ 4 5 6 │ 4 5 6 ║ 7
║ 7 8 9 │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║
╟───────┼───────┼───────╫───────┼───────┼───────╫───────┼── ∧ ──┼───────╢
║ 1 2 3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║
║ 4 5 6 &amp;gt; 4 5 6 │ 4 5 6 &amp;lt; 4 5 6 │ 4 5 6 │ 4 5 6 &amp;gt; 4 5 6 │ 4 5 6 │ 4 5 6 ║ 8
║ 7 8 9 │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║
╟── ∧ ──┼── ∧ ──┼───────╫───────┼───────┼── ∧ ──╫───────┼───────┼── ∧ ──╢
║ 1 2 3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║
║ 4 5 6 │ 4 5 6 │ 4 5 6 ║ 4 5 6 │ 4 5 6 │ 4 5 6 ║ 4 5 6 │ 4 5 6 │ 4 5 6 ║ 9
║ 7 8 9 │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║
╚═══════╧═══════╧═══════╩═══════╧═══════╧═══════╩═══════╧═══════╧═══════╝
    A       B       C       D       E       F       G       H       I
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Nu a&amp;nbsp;z&amp;nbsp;tohohle stavu se jde "dostat" do dalších devíti stavů, každého s&amp;nbsp;jedinou
číslicí v&amp;nbsp;políčku B1.&lt;/p&gt;
&lt;p&gt;Jeden z&amp;nbsp;těchto nových stavů (B1==3) nebude odpovídat
pravidlům. Navíc všechny další stavy, které z&amp;nbsp;něj můžeme dostat odebíráním
možností, budou taky špatně. Takže tenhle stav můžeme&amp;nbsp;vyloučit.&lt;/p&gt;
&lt;p&gt;A&amp;nbsp;tímhle způsobem dostaneme obrovitánský graf stavů.
Graf vytvořený takhle hrubou silou bude až moc velký na to, aby se dal rozumně
pozkoumat, ale důležité je, že obsahuje všechny stavy odpovídající pravidlům.
(Vlastně je pro nás důležité jen to, že určitě obsahuje &lt;em&gt;řešení&lt;/em&gt; (pokud nějaké
existuje), ale vzhledem k&amp;nbsp;tomu že řešení neznáme, všechny "správné" stavy budou
muset stačit.)&lt;/p&gt;
&lt;p&gt;Zbývá jen nějak zajistit, abychom nemuseli procházet ten graf celý, ale
zkusili v&amp;nbsp;něm hledat rozumné cesty a&amp;nbsp;zkratky, které nás k&amp;nbsp;cíli dovedou co
nejrychleji. Tedy, použít něco lepšího než hroubou&amp;nbsp;sílu.&lt;/p&gt;
&lt;p&gt;(Jen podotknu že ten graf nemusí být nutně stromem; do jednoho stavu se může
dát dostat několika různými cestami.)&lt;/p&gt;
&lt;p&gt;Základní schéma algoritmu na prohledávání stavového prostoru je následující
(s&amp;nbsp;komentáři tam, kde Pythonová syntax není naprosto pruhledná):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;open&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;initial_state&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# `[v]` je seznam s jedním prvkem, `v`&lt;/span&gt;
&lt;span class="n"&gt;closed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# prázdná množina&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# dokud je něco v open&lt;/span&gt;
    &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;take_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_goal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt;
    &lt;span class="n"&gt;closed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;generate_next_states&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;closed&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Algoritmus nemá k&amp;nbsp;dispozici celý graf (to by se těžko vešlo do paměti!),
ale "tvoří" si ho pomocí funkce &lt;code&gt;generate_next_states&lt;/code&gt;, která prostě vrátí
seznam stavů, do kterých se z&amp;nbsp;daného stavu dá&amp;nbsp;dostat.&lt;/p&gt;
&lt;p&gt;Množina &lt;code&gt;open&lt;/code&gt; obsahuje všechny stavy které chceme ještě prozkoumat, neboli
"hranici" zatím prozkoumané části grafu. Množina &lt;code&gt;closed&lt;/code&gt; obsahuje stavy, které
jsme už viděli; těmi se nemá cenu zabývat, pokud na ně narazíme&amp;nbsp;znovu.&lt;/p&gt;
&lt;p&gt;Tož to by byl učebnicový algoritmus.
Teď teoreticky všechno závisí jen na tom, jak chytře navrhneme funkce
&lt;code&gt;take_one()&lt;/code&gt; a &lt;code&gt;generate_next_states()&lt;/code&gt;.
Dám několik tipů, které jsem použil&amp;nbsp;já.&lt;/p&gt;
&lt;p&gt;Přímo v &lt;code&gt;generate_next_states&lt;/code&gt; je dobré vyhazovat čísla, která neodpovídají
pravidlům. Já jsem dal tuhle logiku přímo do konstruktoru třídy Stav, takže
můj první stav vypadá ve skutečnosti takhle:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;╔═══════╤═══════╤═══════╦═══════╤═══════╤═══════╦═══════╤═══════╤═══════╗
║   2 3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │     3 │   2 3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║
║ 4 5 6 │ 4 5 6 │ 4 5 6 ║ 4 5 6 │ 4 5 6 &amp;gt; 4 5 6 ║ 4 5 6 │ 4 5 6 │ 4 5 6 ║ 1
║ 7 8 9 │ 7 8 9 │ 7 8   ║ 7 8 9 │ 7 8 9 │ 7 8   ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║
╟── ∨ ──┼───────┼── ∧ ──╫───────┼───────┼── ∨ ──╫───────┼───────┼───────╢
║ 1 2 3 │ 1 2 3 │   2 3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║
║ 4 5 6 │ 4 5 6 │ 4 5 6 ║ 4 5 6 │ 4 5 6 │ 4 5 6 ║ 4 5 6 │ 4 5 6 │ 4 5 6 ║ 2
║       │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7     ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║
╟── ∧ ──┼───────┼───────╫───────┼───────┼───────╫───────┼───────┼───────╢
║   2 3 │     3 │       ║ 1 2 3 │ 1 2 3 │     3 ║       │   2 3 │ 1 2 3 ║
║ 4 5 6 &amp;lt; 4 5 6 &amp;lt; 4 5 6 ║ 4 5 6 │ 4 5 6 │ 4 5 6 &amp;lt; 4 5 6 │ 4 5 6 &amp;gt; 4 5 6 ║ 3
║ 7     │ 7 8   │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8   ║ 7 8 9 │ 7 8 9 │ 7 8   ║
╠═══════╪═══════╪═══════╬═══════╪═══════╪══ ∨ ══╬═══════╪═══════╪═══════╣
║     3 │       │ 1 2 3 ║   2 3 │ 1 2 3 │   2 3 ║ 1 2 3 │   2 3 │ 1 2 3 ║
║ 4 5 6 &amp;lt; 4 5 6 │ 4 5 6 &amp;lt; 4 5 6 │ 4 5 6 │ 4 5 6 &amp;gt; 4 5 6 │ 4 5 6 &amp;gt; 4 5 6 ║ 4
║ 7 8   │ 7 8 9 │ 7 8   ║ 7 8 9 │ 7 8 9 │ 7     ║       │ 7 8 9 │ 7 8   ║
╟── ∨ ──┼───────┼───────╫───────┼───────┼───────╫───────┼───────┼───────╢
║   2 3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │ 1 2 3 │     3 ║ 1 2 3 │ 1 2 3 │ 1 2 3 ║
║ 4 5 6 &amp;gt; 4 5 6 │ 4 5 6 ║ 4 5 6 │ 4 5 6 │ 4 5 6 ║ 4 5 6 │ 4 5 6 │ 4 5 6 ║ 5
║ 7     │       │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║
╟───────┼───────┼───────╫───────┼───────┼── ∨ ──╫───────┼───────┼───────╢
║ 1 2 3 │   2 3 │ 1 2 3 ║   2 3 │ 1 2 3 │   2 3 ║ 1 2 3 │   2 3 │ 1 2 3 ║
║ 4 5 6 &amp;lt; 4 5 6 │ 4 5 6 ║ 4 5 6 &amp;gt; 4 5 6 &amp;lt; 4 5 6 ║ 4 5 6 │ 4 5 6 │ 4 5 6 ║ 6
║ 7 8   │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7     │ 7 8   ║ 7 8   │ 7 8 9 │ 7 8   ║
╠═══════╪═══════╪═══════╬═══════╪═══════╪══ ∧ ══╬══ ∧ ══╪══ ∨ ══╪══ ∧ ══╣
║ 1 2 3 │ 1 2 3 │ 1 2 3 ║ 1 2 3 │   2 3 │     3 ║   2 3 │ 1 2 3 │   2 3 ║
║ 4 5 6 │ 4 5 6 │ 4 5 6 ║ 4 5 6 &amp;lt; 4 5 6 │ 4 5 6 ║ 4 5 6 │ 4 5 6 │ 4 5 6 ║ 7
║ 7 8 9 │ 7 8 9 │ 7 8 9 ║ 7 8   │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8   │ 7 8 9 ║
╟───────┼───────┼───────╫───────┼───────┼───────╫───────┼── ∧ ──┼───────╢
║   2 3 │ 1 2 3 │ 1 2 3 ║   2 3 │ 1 2 3 │   2 3 ║ 1 2 3 │   2 3 │ 1 2 3 ║
║ 4 5 6 &amp;gt; 4 5 6 │ 4 5 6 &amp;lt; 4 5 6 │ 4 5 6 │ 4 5 6 &amp;gt; 4 5 6 │ 4 5 6 │ 4 5 6 ║ 8
║ 7 8   │ 7     │ 7 8   ║ 7 8 9 │ 7 8 9 │ 7 8   ║ 7     │ 7 8 9 │ 7 8   ║
╟── ∧ ──┼── ∧ ──┼───────╫───────┼───────┼── ∧ ──╫───────┼───────┼── ∧ ──╢
║     3 │   2 3 │ 1 2 3 ║ 1 2 3 │ 1 2 3 │     3 ║ 1 2 3 │ 1 2 3 │   2 3 ║
║ 4 5 6 │ 4 5 6 │ 4 5 6 ║ 4 5 6 │ 4 5 6 │ 4 5 6 ║ 4 5 6 │ 4 5 6 │ 4 5 6 ║ 9
║ 7 8 9 │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║ 7 8 9 │ 7 8 9 │ 7 8 9 ║
╚═══════╧═══════╧═══════╩═══════╧═══════╧═══════╩═══════╧═══════╧═══════╝
    A       B       C       D       E       F       G       H       I
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Moje implementace tu dělá několik věcí:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vyhazuje čísla podle zadaných nerovností (pokud má jedno číslo
být větší než druhé, které může být 3-8, tak bude určitě 4&amp;nbsp;nebo&amp;nbsp;víc).&lt;/li&gt;
&lt;li&gt;vyhazuje čísla z&amp;nbsp;řádků, sloupců, čtverců a&amp;nbsp;oblastí, pokud v&amp;nbsp;jiném políčku
  je už dané číslo vybrané&lt;/li&gt;
&lt;li&gt;vyhazuje čísla, která nemůžou dát daný součet pro oblast&lt;/li&gt;
&lt;li&gt;ještě by mohla vybrat číslo, pokud se v&amp;nbsp;řádku/sloupci/čtverci jen jedno
  políčko kde je to číslo možné, ale našel jsem řešení než jsem tohle stihl
  napsat, tak jsem se na to vykašlal.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tím, že tohle dělám co nejdřív, se vyhýbám spoustě zbytečných stavů. Vzhledem k
tomu, že každý stav nejen potřebuje nějaký ten procesorový čas a&amp;nbsp;paměť, ale
navíc se pak množí jak králík v&amp;nbsp;Austrálii, je dobré takhle normalizovat&amp;nbsp;co
nejagresivněji.&lt;/p&gt;
&lt;p&gt;Další místo, kde je možné algoritmus potunit, je výběr políčka, ve kterém se
budou generované stavy lišit.
Já vždycky vyberu políčko s&amp;nbsp;nejnižším počtem možností (kromě 1, samozřejmě).
Tím docílím toho, že každý stav má co nejmenší počet "potomků", takže graf
neroste tak rychle.
Je samozřejmě možné zvolit úplně jinou strategii. Fungovalo by třeba udělat
potomky dva: jednoho s&amp;nbsp;první možností v&amp;nbsp;daném políčku, a&amp;nbsp;druhého s&amp;nbsp;možnostmi
ostatními. Dokonce není nutné generovat stavy lišící se jen v&amp;nbsp;jednom políčku.
Jen je důležité, aby existovala cesta ke každému validnímu stavu (nebo teda
aspoň k&amp;nbsp;tomu cílovému).&lt;/p&gt;
&lt;p&gt;Tohle tunění tvaruje prozkoumávanou oblast grafu, je tak širší nebo hlubší,
rozvětvenější nebo kompaktnější.
Nějaké velké optimalizování je silně závislé na problému,
a&amp;nbsp;je to leckdy spíš umění než exaktní věda.
Naštěstí na tohle sudoku nic moc složitého potřeba&amp;nbsp;není.&lt;/p&gt;
&lt;p&gt;No a&amp;nbsp;snad poslední kritické místo v&amp;nbsp;algoritmu je funkce &lt;code&gt;take_one&lt;/code&gt;, která vyjme
a&amp;nbsp;vrátí další stav, kterým se bude program zabývat.
Může například zvolit vždycky nejstarší prvek ze seznamu (v&amp;nbsp;tom případě jde o
hledání "do šířky", které se vyplatí třeba pokud víme že cíl není v&amp;nbsp;grafu
příliš hluboko), nebo naopak nejnovější (hledání do hloubky).
Taky jde jednotlivým stavům přiřadit skóre, a&amp;nbsp;vždycky vybrat ten stav, který
nejvíc vypadá že povede ke správnému řešení.
Vyrobit na tohle dobrou hodnotící funkci je celkem kumšt; já to tady zkusil,
ale nakonec jsem zjistil že je to rychlejší bez&amp;nbsp;ní.&lt;/p&gt;
&lt;p&gt;(Na takové hodnotící funkci jsou pak založené algoritmy jako A*, které nejen že
ve stavovém prostoru najdou cíl, ale vrátí opotimální cíl a&amp;nbsp;optimální cestu k
němu. Typické použití: AI ve hrách.)&lt;/p&gt;
&lt;p&gt;A&amp;nbsp;na závěr jeden tip: je dobré investovat nějaký čas do funkcí na zobrazení
stavů nebo toho, jak si algoritmus vede (např. velikosti množin &lt;code&gt;open&lt;/code&gt; a
&lt;code&gt;closed&lt;/code&gt;; cesta grafem k&amp;nbsp;právě prohledávanému stavu, atd.).
Možná není potřeba to přehánět jako já (ty ASCII-arty výše jsou v&amp;nbsp;mém programu
navíc obarvené podle oblastí se součtem), ale cokoli pomůže pochopit to, co se
vevnitř děje, hodně pomáhá.&lt;/p&gt;
&lt;p&gt;Tož přeji hezké programování, snad tenhle výlev trochu&amp;nbsp;pomůže.&lt;/p&gt;</content><category term="Computers"></category><category term="geocaching"></category><category term="algorithm"></category></entry><entry><title>Caps Lock a přepínání klávesnice</title><link href="https://encukou.cz/blog/2011/11/21/cs-caps-lock-a-prepinani-klavesnice" rel="alternate"></link><published>2011-11-21T00:00:00+01:00</published><updated>2011-11-21T00:00:00+01:00</updated><author><name>Petr Viktorin</name></author><id>tag:encukou.cz,2011-11-21:/blog/2011/11/21/cs-caps-lock-a-prepinani-klavesnice</id><summary type="html">&lt;p&gt;Caps Lock je k ničemu.
Posledních asi pět let jsem ho mačkal prakticky jen omylem.
Možná to je tím, že neumím psát všema deseti, a tudíž věci jako
LD_LIBRARY_PATH nebo UNESCO jdou napsat rychle jen se Shiftem – každopádně fakt
je, že Caps Lock mi je k ničemu.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Caps Lock je k&amp;nbsp;ničemu.
Posledních asi pět let jsem ho mačkal prakticky jen omylem.
Možná to je tím, že neumím psát všema deseti, a&amp;nbsp;tudíž věci jako
LD_LIBRARY_PATH nebo UNESCO jdou napsat rychle jen se Shiftem – každopádně fakt
je, že Caps Lock mi je k&amp;nbsp;ničemu.&lt;/p&gt;


&lt;p&gt;Když jsem ještě pracoval na desktopu, byl na klávesnici Scroll Lock – ještě
méně užitečná klávesa, která nedělala vůbec nic.
Přemapoval jsem si ho na přepnutí mezi anglickou a&amp;nbsp;českou klávesnicí,
což fungovalo krásně.
Dokonce s&amp;nbsp;LED indikátorem sekundárního rozložení.
Po nějaké době jsem smazal nápis Scroll Lock a&amp;nbsp;nakreslil na tu klávesu&amp;nbsp;českou
vlaječku.&lt;/p&gt;
&lt;p&gt;Pak jsem přešel na laptop.
Scroll Lock je kdesi na Fň-F9, což je natolik neergonomická a
nezapamatovatelná zkratka, že jsem častěji přepínal rozložení myší.
Světýlko ale pořád fungovalo, což bylo&amp;nbsp;cool.&lt;/p&gt;
&lt;p&gt;Na novém Thinkpadu ale už ani to světýlko není.
A&amp;nbsp;tak jsem přemapoval změnu klávesnice na Caps Lock.
To ovšem nefungovalo moc dobře, protože jsem často onu klávesu zmáčkl omylem,
a&amp;nbsp;pak se najednou divil že místo čísel píšu&amp;nbsp;ěščř.&lt;/p&gt;
&lt;p&gt;Pak jsem na to přišel.
Shift+Caps přepne na češtinu, Caps na angličtinu.
A&amp;nbsp;tak to mám doteď, i&amp;nbsp;když je pravda že českou klávesnici zas tak často
nepoužívám,
takže je to možná stejně zbytečné.&lt;/p&gt;
&lt;p&gt;Jestli nakonec nebude přece jen lepší mít na místě Capsu druhý Backspace…&lt;/p&gt;</content><category term="Computers"></category><category term="posterous"></category><category term="capslock"></category></entry><entry><title>Dennis Ritchie has died.</title><link href="https://encukou.cz/blog/2011/10/13/en-rip-dennis-ritchie" rel="alternate"></link><published>2011-10-13T00:00:00+02:00</published><updated>2011-10-13T00:00:00+02:00</updated><author><name>Petr Viktorin</name></author><id>tag:encukou.cz,2011-10-13:/blog/2011/10/13/en-rip-dennis-ritchie</id><summary type="html">
&lt;p&gt;We have lost a humble genius, a mathematician, an architect of the abstract.
It's sad that most poeple will never be able to appreciate the beauty of things
he has done.
Perhaps that, too, is the mark of a genius.&lt;/p&gt;</summary><content type="html">&lt;p&gt;The Economist has a &lt;a href="http://www.economist.com/node/2724348"&gt;very good article&lt;/a&gt;
on some of his work; you should read it if you haven't done so already.
I&amp;nbsp;quote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dr Ritchie likes to emphasise that he was just one member of a&amp;nbsp;group.
With characteristic modesty, he suggests that many of the improvements he
introduced when developing C simply “looked like a&amp;nbsp;good thing to do”.
Anyone else in the same place at the same time, he implies, would have done
the same thing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In other words, he Did the Right Thing; he found the answer that is, in
retrospect, obvious. That is the mark of a&amp;nbsp;genius.&lt;/p&gt;
&lt;p&gt;His ideas stood the test of time. He has reached a&amp;nbsp;local maximum: Java or C++
or C# are object-oriented languages; C is the procedural language. Sure, there
may be something better than C, in some sense of the word.
It's&amp;nbsp;like Newton's&amp;nbsp;laws being surpassed by Einstein's&amp;nbsp;relativity – C will still
be there.
Still valid, still useful, still&amp;nbsp;used.&lt;/p&gt;

&lt;p&gt;We have lost a&amp;nbsp;humble genius, a&amp;nbsp;mathematician, an architect of the abstract.
It's&amp;nbsp;sad that most poeple will never be able to appreciate the beauty of things
he has done.
Perhaps that, too, is the mark of a&amp;nbsp;genius.&lt;/p&gt;</content><category term="Comments"></category><category term="sad"></category><category term="posterous"></category></entry></feed>